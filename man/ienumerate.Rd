% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/enumerate.R, R/ienumerate.r, R/iteror.R
\name{ienumerate}
\alias{ienumerate}
\alias{ienum}
\alias{ienumerate.array}
\title{Create an enumeration object}
\usage{
ienumerate(object, ...)

ienumerate(object, ...)

ienum(object, ...)

\method{ienumerate}{array}(
  obj,
  ...,
  by = c("cell", "row", "column"),
  chunksize = 1L,
  recycle = FALSE,
  drop = FALSE
)
}
\arguments{
\item{object}{object to return indefinitely.}

\item{iterable}{Iterable to iterate over.}
}
\value{
iterator that returns the values of \code{object} along with the
index of the object.
}
\description{
Create an iterator that iterates over an iterable, returning the value in a
list that includes an index.

Constructs an iterator that returns the elements of an object along with each
element's indices. Enumeration is useful when looping through an
\code{object} and a counter is required.
}
\details{
Originally from the \code{itertools} package.

This function is intended to follow the convention used in Python's
\code{enumerate} function where the primary difference is that a list is
returned instead of Python's \code{tuple} construct.

Each call to \code{\link[iterators]{nextElem}} returns a list with two
elements:
\describe{
\item{index:}{a counter}
\item{value:}{the current value of \code{object}}
}

\code{ienum} is an alias to \code{ienumerate} to save a few keystrokes.

First appeared in package \code{iterators2}.
}
\examples{

# Create an enumeration of five random numbers
as.list(ienumerate(rnorm(5)))

set.seed(42)
it <- ienumerate(rnorm(5))
as.list(it)

# Iterates through the columns of the iris data.frame
it2 <- ienum(iris)
nextOr(it2, NA)
nextOr(it2, NA)
nextOr(it2, NA)
nextOr(it2, NA)
nextOr(it2, NA)

}
\keyword{utilities}
