% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rng.R
\name{irnorm}
\alias{irnorm}
\alias{irunif}
\alias{irbinom}
\alias{irnbinom}
\alias{irpois}
\alias{isample}
\title{Random Number Iterators}
\usage{
irnorm(n, mean = 0, sd = 1, count = Inf, independent = !missing(seed), seed)

irbinom(n, size, prob, count = Inf, independent = !missing(seed), seed)

irnbinom(n, size, prob, mu, count = Inf, independent = !missing(seed), seed)

irpois(n, lambda, count = Inf, independent = !missing(seed), seed)

isample(
  x,
  size,
  replace = FALSE,
  prob = NULL,
  count = Inf,
  independent = !missing(seed),
  seed
)

irunif(n, min = 0, max = 1, count = Inf, independent = !missing(seed), seed)
}
\arguments{
\item{n}{How many samples to compute per call; see e.g. \link{rnorm}.}

\item{mean}{see \link{rnorm}.}

\item{sd}{see \link{rnorm}.}

\item{count}{number of times that the iterator will fire.  If not
specified, it will fire values forever.}

\item{independent}{If TRUE, this iterator will keep its own private
random state, so that its output is reproducible and independent
of anything else in the program; this comes at some performance
cost. If you do not specify \code{seed} a seed value will be chosen
for you.}

\item{seed}{A specific seed value for reproducibility. If given,
\code{independent=TRUE} is implied. Well separated seed values can be
obtained from \link{iRNGStream}.}

\item{size}{see e.g. \link{rbinom}.}

\item{prob}{see e.g. \link{rbinom}.}

\item{mu}{see \link{rnbinom}.}

\item{lambda}{see \link{rpois}.}

\item{x}{see \link{isample}.}

\item{replace}{see \link{isample}.}

\item{min}{see \link{runif}.}

\item{max}{see \link{runif}.}
}
\value{
An iterator that is a wrapper around the corresponding
random number generator function.
}
\description{
These function returns an iterator that returns random
numbers of various distributions.  Each one is a wrapper around a
standard \code{R} function.
}
\details{
Originally from the \code{iterators} package.
}
\examples{

# create an iterator that returns three random numbers
it <- irnorm(1, count = 3)
nextOr(it)
nextOr(it)
nextOr(it)
nextOr(it, NULL)

# iterators created with a specific seed will produce reproducible values
it <- irunif(n=1, seed=314)
nextOr(it) # 0.4936700
nextOr(it) # 0.5103891
nextOr(it) # 0.2338745
}
