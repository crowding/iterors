% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rng.R
\name{irnorm}
\alias{irnorm}
\alias{irunif}
\alias{irbinom}
\alias{irnbinom}
\alias{irpois}
\alias{isample}
\title{Random Number Iterators}
\usage{
irnorm(
  n,
  mean = 0,
  sd = 1,
  count = Inf,
  independent = TRUE,
  seed = nextOr(rng.state$stream)
)

irbinom(
  n,
  size,
  prob,
  count = Inf,
  independent = TRUE,
  seed = nextOr(rng.state$stream)
)

irnbinom(
  n,
  size,
  prob,
  mu,
  count = Inf,
  independent = TRUE,
  seed = nextOr(rng.state$stream)
)

irpois(
  n,
  lambda,
  count = Inf,
  independent = TRUE,
  seed = nextOr(rng.state$stream)
)

isample(
  x,
  size,
  replace = FALSE,
  prob = NULL,
  count = Inf,
  independent = TRUE,
  seed = nextOr(rng.state$stream)
)

irunif(
  n,
  min = 0,
  max = 1,
  count = Inf,
  independent = TRUE,
  seed = nextOr(rng.state$stream)
)
}
\arguments{
\item{count}{number of times that the iterator will fire.  If not
specified, it will fire values forever.}

\item{independent}{default TRUE means that each iterator will keep
its own independent RNG seed; meaning that rendom number
iterators will be truly independent of any others. If FALSE,
rendom number generation}

\item{seed}{A seed value usable by the "L'Ecuyer-CMRG"
generator. The default will create a pseudo-independent stream
for each newly constructed iterator. You can specify a specific
value for reproducibility. To reproduciby greate several
independent random numer iterators see the example under
\link{iRNGStream}.}

\item{\dots}{arguments to pass to the underlying \code{rnorm}
function.}
}
\value{
An iterator that is a wrapper around the corresponding
random number generator function.
}
\description{
These function returns an iterators that return random numbers of various
distributions.  Each one is a wrapper around a standard \code{R} function.
}
\details{
Originally from the \code{iterators} package.
}
\examples{

# create an iterator that returns three random numbers
it <- irnorm(1, count = 3)
nextOr(it)
nextOr(it)
nextOr(it)
nextOr(it, NULL)

# iterators with the same seed will produce the same values
it <- irunif(it, seed=0.4812097)
}
