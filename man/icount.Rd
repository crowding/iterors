% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/icount.R, R/ireadLines.R
\name{icount}
\alias{icount}
\alias{icountn}
\title{Counting Iterators}
\usage{
icount(count, recycle = FALSE)

icountn(vn, recycle = FALSE)

icount(count, recycle = FALSE)

icountn(vn, recycle = FALSE)
}
\arguments{
\item{count}{number of times that the iterator will fire.  If not specified,
it will count forever.}

\item{recycle}{Whether to restart the count after finishing.}
}
\value{
The counting iterator.

The counting iterator.
}
\description{
Returns an iterator that counts starting from one.

\code{icountn(vn)} takes a vector specifying an array size,
and returns an iterator over array indices. Each returned element
is a vector the same length as vn, with the first index varying fastest.

Returns an iterator that counts starting from one.

\code{icountn(vn)} takes a vector specifying an array size,
and returns an iterator over array indices. Each returned element
is a vector the same length as vn, with the first index varying fastest.
}
\details{
Originally from the \code{iterators} package.

Originally from the \code{iterators} package.
}
\examples{

# create an iterator that counts from 1 to 3.
it <- icount(3)
nextOr(it)
nextOr(it)
nextOr(it)
nextOr(it, NULL)  # expect NULL

x <- icount(5)
repeat print(nextOr(x, break))
as.list(icountn(c(2, 3)))

# create an iterator that counts from 1 to 3.
it <- icount(3)
nextOr(it)
nextOr(it)
nextOr(it)
nextOr(it, NULL)  # expect NULL

x <- icount(5)
repeat print(nextOr(x, break))
as.list(icountn(c(2, 3)))
}
\seealso{
For more control over starting number and step size, see \link{iseq}.

For more control over starting number and step size, see \link{iseq}.
}
\keyword{utilities}
