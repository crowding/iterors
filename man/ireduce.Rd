% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ireduce.R
\name{ireduce}
\alias{ireduce}
\alias{iaccum}
\alias{sum.iteror}
\alias{prod.iteror}
\title{Compute the sum, product, or general reduction of an iterator.}
\usage{
ireduce(obj, fun = `+`, init = 0, ...)

iaccum(obj, fun = `+`, init = 0, ...)

\method{sum}{iteror}(..., na.rm = FALSE)

\method{prod}{iteror}(..., na.rm = FALSE)
}
\arguments{
\item{obj}{an iterable object}

\item{fun}{A function of as least two arguments.}

\item{init}{A starting value.}

\item{...}{Extra parameters will be passed to each call to \code{fun}.}

\item{na.rm}{Whether to drop NA values when computing sum or prod.}
}
\value{
The result of accumulation.
}
\description{
\code{ireduce(obj, fun)} applies \code{fun}
}
\examples{
it <- icount(5)
total <- ireduce(it, `+`) # sum(1:5)

it <- icount(5)
ireduce(it, paste0, "") # "12345"

it <- icount(5)
prod <- ireduce(it, `*`, 1) # prod(1:5)

# the above is equivalent to:
it <- icount(5)
total <- 1
repeat total <- total * nextOr(it, break)
# triangular numbers: 1, 1+2, 1+2+3, ...
take(iaccum(icount()), 10, 'numeric')
}
\author{
Peter Meilstrup
}
