[{"path":"https://crowding.github.io/iterors/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://crowding.github.io/iterors/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://crowding.github.io/iterors/articles/README.html","id":"features","dir":"Articles","previous_headings":"","what":"Features","title":"The iterors package: Fast, compact iterators and tools","text":"Main method nextOr(iter, ); allows simpler faster code. iteror objects cross-compatible existing code using iterators (foreach package.) Optimized performance, often several times less overhead per item. Compatible Python iterators, via reticulate package. Comes batteries included: complete collection iterator functions, ported, curated harmonized packages iterators, itertools, itertools2,","code":""},{"path":"https://crowding.github.io/iterors/articles/README.html","id":"how-is-it-different-from-iterators","dir":"Articles","previous_headings":"","what":"How is it different from iterators?","title":"The iterors package: Fast, compact iterators and tools","text":"iterors uses method nextOr(, ) retrieve next element. trick second argument lazily evaluated, can specify return value action take end iteration. particular, can control flow operator like break next return. example, can compute sum iteror : contrast existing iterators package: package nextElem signals end iteration throwing exception, means iterator code happened inside tryCatch. Computing sum iterator looked like : Besides requiring less boilerplate, iterator code written using nextOr also performs faster, particularly using higher-order iterator functions. tryCatch relatively expensive operation R, especially used per item. also possible(*) use break next exit outer loop inside tryCatch handler function. nextOr designed use mind. benchmarking vignette illustrates computations using iterors can execute several times faster using iterators. iterors package grew , complement , generators implemented async package. async::gen lets construct iterators complex logic, using familiar imperative code flow control constructs like , switch . Meanwhile, functions package iterors let manipulate output generator functional style. two packages form two complementary ways can work sequential processes.","code":"total <- 0 repeat   total <- total + nextOr(it, break) total <- 0 tryCatch(   repeat total <- total + nextElem(it),   error=function(x) {     if (conditionMessage(x) != \"StopIteration\") stop(x)   } )"},{"path":"https://crowding.github.io/iterors/articles/README.html","id":"more-reading","dir":"Articles","previous_headings":"","what":"More reading","title":"The iterors package: Fast, compact iterators and tools","text":"quick introduction, see vignette(\"iterors\") index iteror functions organized task, see vignette(\"categories\", \"iterors\") familiar packages iterators/itertools/itertools2, functions moved. See vignette(\"cross-reference\", \"iterors\") learn build custom iterors, see vignette(\"writing\", \"iterors\")","code":""},{"path":"https://crowding.github.io/iterors/articles/README.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"The iterors package: Fast, compact iterators and tools","text":"prerelease, run following installing devtools: package released, able install stable version CRAN:","code":"devtools::install_github('crowding/iterors') install.packages('iterors', dependencies=TRUE)"},{"path":"https://crowding.github.io/iterors/articles/README.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"The iterors package: Fast, compact iterators and tools","text":"GPL-3","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"consuming-iterators","dir":"Articles","previous_headings":"Basic iterators (self-contained/memory-backed)","what":"Consuming iterators","title":"Benchmarking Iteration","text":"Since following tests use different versions icount, iter_consume, .list, first check close functions . plot chunk unnamed-chunk-2 Note using function iter_consume, itertools::consume poor performance due invoking try every item.","code":"as.list.bench <- microbenchmark::microbenchmark(   iter_consume = iter_consume(iterators::icount(3000)),   iterors.consume = iterors::consume(iterors::icount(3000)),   iterators.as_list = as.list(iterators::icount(3000)),   iterors.as_list = as.list(iterors::icount(3000)),   times = 10) plotit(as.list.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"simple-iteration-over-a-vector","dir":"Articles","previous_headings":"Basic iterators (self-contained/memory-backed)","what":"Simple iteration over a vector","title":"Benchmarking Iteration","text":"plot chunk unnamed-chunk-3","code":"vector.bench <- microbenchmark::microbenchmark(     iterators = iter_consume(iterators::iter(1:1000)),     iterors = iterors::consume(iterors::iteror(1:1000)),     times = 10)   plotit(vector.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"chunking-a-vector","dir":"Articles","previous_headings":"Basic iterators (self-contained/memory-backed)","what":"Chunking a vector","title":"Benchmarking Iteration","text":"plot chunk unnamed-chunk-4","code":"chunk.bench <- microbenchmark::microbenchmark(   itertools = iter_consume(itertools::isplitVector(1:6000, chunkSize=17)),   iterors = iterors::consume(iterors::iteror(1:6000, chunkSize=17)),   times = 10) plotit(chunk.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"extracting-rows-or-columns","dir":"Articles","previous_headings":"Basic iterators (self-contained/memory-backed)","what":"Extracting rows or columns","title":"Benchmarking Iteration","text":"plot chunk unnamed-chunk-5","code":"arr <- array(1:1000000, c(1000,1000)) slice.bench <- microbenchmark::microbenchmark(   iterators.rows = iter_consume(iterators::iter(arr, by=\"row\")),   iterators.cols = iter_consume(iterators::iter(arr, by=\"column\")),   itertools.array_rows = iter_consume(itertools::iarray(arr, MARGIN = 1)),   itertools.array_cols = iter_consume(itertools::iarray(arr,MARGIN = 2)),   iterors.rows = iterors::consume(iterors::iteror(arr, by=1)),   iterors.cols = iterors::consume(iterors::iteror(arr, by=2)), times = 10) plotit(slice.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"split-matrix-into-chunks","dir":"Articles","previous_headings":"Basic iterators (self-contained/memory-backed)","what":"Split matrix into chunks","title":"Benchmarking Iteration","text":"plot chunk unnamed-chunk-6","code":"arr <- array(1:1000000, c(1000,1000)) array_chunks.bench <- microbenchmark::microbenchmark(   itertools.rows = iter_consume(itertools::isplitRows(arr, chunkSize=7)),   itertools.cols = iter_consume(itertools::isplitCols(arr, chunkSize=7)),   iterors.rows = iterors::consume(iterors::iteror(arr, by=1, chunkSize=7)),   iterors.cols = iterors::consume(iterors::iteror(arr, by=2, chunkSize=7)), times = 10) plotit(array_chunks.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"enumerating-n-d-array-indices","dir":"Articles","previous_headings":"Basic iterators (self-contained/memory-backed)","what":"Enumerating N-D array indices:","title":"Benchmarking Iteration","text":"plot chunk unnamed-chunk-7","code":"icountn.bench <- microbenchmark::microbenchmark(    iterators = iter_consume(iterators::icountn(c(4,5,6,7))),     iterors = iterors::consume(iterors::icountn(c(4,5,6,7))),     times =10)  plotit(icountn.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"cartesian-product-of-vectors","dir":"Articles","previous_headings":"Basic iterators (self-contained/memory-backed)","what":"Cartesian product of vectors","title":"Benchmarking Iteration","text":"plot chunk unnamed-chunk-8","code":"igrid.bench <- microbenchmark::microbenchmark(   # itertools2 = iter_consume(itertools2::iproduct(1:10, letters, month.name)),   itertools = iter_consume(itertools::product(1:10, letters, month.name)),   itertools2 = iter_consume(itertools2::iproduct(1:10, letters, month.name)),   iterors = iterors::consume(iterors::igrid(1:10, letters, month.name)),   times = 10) plotit(igrid.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"random-number-generation","dir":"Articles","previous_headings":"Basic iterators (self-contained/memory-backed)","what":"Random number generation","title":"Benchmarking Iteration","text":"independent=TRUE extra work saving restoring random number generator settings. plot chunk unnamed-chunk-9","code":"sampling.bench <- microbenchmark::microbenchmark(     iterators = as.list(iterators::irunif(100, count=100)),     iterors.independent = as.list(iterors::irunif(100, count=100, independent=TRUE)),     iterors.dependent = as.list(iterors::irunif(100, count=100, independent=FALSE)),     times = 100) plotit(sampling.bench)"},{"path":[]},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"chaining-iterators-end-to-end","dir":"Articles","previous_headings":"Higher order iterators / iterator functions","what":"Chaining iterators end-to-end","title":"Benchmarking Iteration","text":"plot chunk unnamed-chunk-10","code":"chain.bench <- microbenchmark::microbenchmark(   itertools = iter_consume(     do.call(itertools::chain,             lapply(1:50, iterators::icount))),     itertools2 = iter_consume(       do.call(itertools2::ichain,               lapply(1:50, iterators::icount))),   iterors =     iterors::consume(do.call(iterors::i_chain, lapply(1:50, iterors::icount))),   iterors.collapse =     iterors::consume(iterors::i_concat(iterors::i_apply(1:50, iterors::icount))),   times=10) plotit(chain.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"keeping-or-dropping-items-according-to-a-criterion","dir":"Articles","previous_headings":"Higher order iterators / iterator functions","what":"Keeping or dropping items according to a criterion","title":"Benchmarking Iteration","text":"plot chunk unnamed-chunk-11","code":"i_keep.bench <- microbenchmark::microbenchmark(     iterators = as.list(itertools::ifilter(\\(x) floor(sqrt(x))^2 == x, iterators::icount(5000))),     iterors = as.list(iterors::i_keep(iterors::icount(5000), \\(x) floor(sqrt(x))^2 == x)),     times = 10) plotit(i_keep.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"select-only-unique-values","dir":"Articles","previous_headings":"Higher order iterators / iterator functions","what":"Select only unique values","title":"Benchmarking Iteration","text":"iterors::i_unique uses hash table better performance. plot chunk unnamed-chunk-12","code":"i_unique.bench <- microbenchmark::microbenchmark(        iterators = {          it <- itertools2::iunique(iterators::isample(1:100, 1))          as.numeric(itertools2::take(it, 100))        },        iterors = {          it <- iterors::i_unique(iterors::isample(1:100, 1, independent=FALSE))          iterors::take(it, 100, \"numeric\")        },        times=10) plotit(i_unique.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"i_recycle","dir":"Articles","previous_headings":"Higher order iterators / iterator functions","what":"i_recycle","title":"Benchmarking Iteration","text":"Note itertools2::icycle works self-contained vector-based iterators, two use general purpose buffer. plot chunk unnamed-chunk-13","code":"icycle.bench <- microbenchmark::microbenchmark(   itertools2 = as.list(itertools2::icycle(iterators::icount(20), times = 20)),   itertools = iter_consume(itertools::recycle(iterators::icount(20), times = 20)),   iterors = iterors::consume(iterors::i_recycle(iterors::icount(20), times = 20)),   times = 20) plotit(icycle.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"i_tee","dir":"Articles","previous_headings":"Higher order iterators / iterator functions","what":"i_tee","title":"Benchmarking Iteration","text":"Note itertools2::tee works vector-based iterators knows clone, iterors::i_tee uses general purpose buffering mechanism. plot chunk unnamed-chunk-14","code":"i_tee.bench <- microbenchmark::microbenchmark(   itertools2={     iter_consume(       do.call(itertools::chain,         itertools2::itee(1:20, n=20)))   },   iterors={     iterors::consume(       iterors::i_concat(         iterors::i_tee(iterors::icount(20), n=20)))   },   times=20) plotit(i_tee.bench)"},{"path":"https://crowding.github.io/iterors/articles/benchmarks.html","id":"sliding-window-iterators","dir":"Articles","previous_headings":"Higher order iterators / iterator functions","what":"Sliding window iterators","title":"Benchmarking Iteration","text":"iterors uses specialized routines n=2 n=3. n=4 , general purpose queue used. plot chunk unnamed-chunk-15","code":"marks=c(alist(   itertools2.w2={iter_consume(itertools2::ipairwise(1:200))}),   if (exists(\"itripletwise\", asNamespace(\"itertools2\"), inherits=FALSE)) {     alist(itertools2.w3={iter_consume(itertools2::itripletwise(1:200))})   },   alist(     iterors.w2={iterors::consume(iterors::i_window(1:200, 2))},     iterors.w3={iterors::consume(iterors::i_window(1:200, 3))},     iterors.w4={iterors::consume(iterors::i_window(1:200, 4))},     iterors.w50={iterors::consume(iterors::i_window(1:200, 50))})) i_window.bench <- microbenchmark::microbenchmark(list=marks, times=10) plotit(i_window.bench)"},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"basic-methods","dir":"Articles","previous_headings":"","what":"Basic methods","title":"Index of `iteror` functions by task","text":".iteror – Check whether function class ‘iteror’. nextOr – Obtain next element iteror. iteror – Generic function convert given object iteror.","code":""},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"consuming-summarizing-an-iteror","dir":"Articles","previous_headings":"","what":"Consuming / summarizing an iteror","title":"Index of `iteror` functions by task","text":"functions S3 generic. .character, .numeric, .logical, .list – Collect iteror’s values vector. .vector – Collect values specified type vector. concat – Paste iteror’s values end--end one vector. consume – Take iteror’s elements discard . count – Compute elements, discard return count. dotproduct – Sum products corresponding elements two iterors. nth – Compute discard first \\(n-1\\) elements return \\(n\\)th. prod.iteror – Product iteror’s values (.e. reduce using *.) quantify – Consume iteror return many elements TRUE. record – Write iteror’s elements file. reduce – Combine iteror’s values using binary function, returning final value. sum.iteror – Sum values iteror (.e. reduce using +.) take – Take number elements return vector.","code":""},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"iterate-over-given-data","dir":"Articles","previous_headings":"","what":"Iterate over given data","title":"Index of `iteror` functions by task","text":"convention, package functions construct iterator names beginning “”. ienum, ienumerate – return elements iterable alongside index. i_repeat – Return one value . iteror.array – Iterate array along given dimensions. iteror.data.frame – Iterate rows columns data frame. iteror.default – Iterate vector first last index.","code":""},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"counting-or-other-mathematically-defined-processes","dir":"Articles","previous_headings":"","what":"Counting or other mathematically defined processes","title":"Index of `iteror` functions by task","text":"icombinations – Enumerate combinations \\(m\\) elements given vector, without replacement. icount – Produce integer sequence starting 1. icountn – Enumerate multiple indices, either row-major col-major order. idiv – Return sequence \\(n\\) integers add given total. igrid – Produce sequence Cartesian product given vectors. ipermutations – sequence containing permutations given vector. iseq – Generate arithmetic sequences specific step size origin. iseq_along – Counting sequence parallel given vector.","code":""},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"random-number-generation","dir":"Articles","previous_headings":"","what":"Random number generation","title":"Index of `iteror` functions by task","text":"Random number iterators can made reproducible specifying independent=TRUE specifying seed value, though performance cost. iRNGStream, iRNGSubStream – Create sequence seed values make parallel, decorrelated random streams. irnbinom, irnorm, irpois, irunif, isample, irbinom – Draw samples given distribution.","code":""},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"iterators-dealing-with-files-or-functions","dir":"Articles","previous_headings":"","what":"Iterators dealing with files or functions","title":"Index of `iteror` functions by task","text":"iread.table – Reads row-wise delimited text files. ireadBin – Read binary data file connections. ireadLines – Read lines text connections. ireaddf – Read rows several files parallel (one per column). ireplay – reads back values data file created record itabulate – Evaluate function arithmetic sequence. record – Write values iterator file.","code":""},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"custom-iterators","dir":"Articles","previous_headings":"","what":"Custom iterators","title":"Index of `iteror` functions by task","text":"iteror.function – Create iteror custom behavior.","code":""},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"higher-order-iterator-functions","dir":"Articles","previous_headings":"","what":"Higher order iterator functions","title":"Index of `iteror` functions by task","text":"convention, package, functions transform iterators – creating new iterator based one underlying iterables – begin i_, underscore.","code":""},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"iterators-as-sequences-looping-repeating-indexing","dir":"Articles","previous_headings":"Higher order iterator functions","what":"Iterators as sequences – Looping, repeating, indexing","title":"Index of `iteror` functions by task","text":"i_chunk – collect \\(n\\) adjacent values iterable return list. i_pad – given iterator ends, return padding value indefinitely. i_recycle – Record values emitted underlying iterator replay . i_rep – Repeat element iterable given number times. i_slice – Return elements based starting point ans stride. i_window – Return adjacent elements underlying iteror sliding window.","code":""},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"operating-on-data-within-iterators","dir":"Articles","previous_headings":"Higher order iterator functions","what":"Operating on data within iterators","title":"Index of `iteror` functions by task","text":"i_accum – Apply 2-argument function iteror’s elements, return sequence partial totals. i_apply – Apply given function element. i_enumerate – Return index along element. i_star, i_starmap, i_map – Apply multiple-argument function multiple parallel iterators.","code":""},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"selection-filtering-limiting","dir":"Articles","previous_headings":"Higher order iterator functions","what":"Selection, filtering, limiting","title":"Index of `iteror` functions by task","text":"i_break – Return elements given (-argument) function evaluates TRUE. i_dedup – Discard elements identical immediately preceding element. i_drop – Discard elements criterion function returns TRUE. i_dropwhile – Discard elements iterator criterion function evaluates FALSE. i_keep – Keep elements applied criterion function returns TRUE. i_keepwhile – Keep elements applied criterion returns FALSE. i_limit – Keep first \\(n\\) elements given iteror. i_mask – Return elements parallel iterator TRUE. i_rle – Compress runs identical adjacent elements, returning one value run length. i_rleinv – Inverse transform i_rle. i_timeout – Return elements timeout reached. i_unique – Pass along unique elements iterator, using hash table.","code":""},{"path":"https://crowding.github.io/iterors/articles/categories.html","id":"combining-splitting-multiple-iterators","dir":"Articles","previous_headings":"Higher order iterator functions","what":"Combining / splitting multiple iterators","title":"Index of `iteror` functions by task","text":"i_chain – String values iterable argument together. i_concat – String iterable iterables together. i_roundrobin – Return one element time series iterors rotation. i_tee – Split iterator multiple iterators yielding sequence. i_zip – Combine corresponding elements parallel iterators list. i_zip_longest – i_zip pad iterators end early.","code":""},{"path":"https://crowding.github.io/iterors/articles/iterors.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using the `iterors` package","text":"iterator special type object generalizes notion looping variable. passed argument function knows , iterator supplies sequence values. iterator also maintains information state, particular current index. iteror package includes number functions creating iterators, starting iteror, takes virtually R object turns iterator object. simplest function operates iterators nextOr function, given iterator, returns next value iterator. example, create iterator object sequence 1 10, use nextOr iterate values: can create iterators matrices data frames, using argument specify whether iterate row column: Iterators can also created functions, case iterator can endless source values: practical applications, iterators can paired foreach obtain parallel results quite easily:","code":"library(iterors) i1 <- iteror(1:10) nextOr(i1) ## [1] 1 nextOr(i1) ## [1] 2 istate <- iteror(state.x77, by='row') nextOr(istate) ##         Population Income Illiteracy Life Exp Murder HS Grad Frost  Area ## Alabama       3615   3624        2.1    69.05   15.1    41.3    20 50708 nextOr(istate) ##        Population Income Illiteracy Life Exp Murder HS Grad Frost   Area ## Alaska        365   6315        1.5    69.31   11.3    66.7   152 566432 ifun <- iteror(function(or) sample(0:9, 4, replace=TRUE)) nextOr(ifun) ## [1] 3 1 6 2 nextOr(ifun) ## [1] 6 2 1 2 > library(foreach) foreach: simple, scalable parallel programming from Revolution Analytics Use Revolution R for scalability, fault tolerance and more. http://www.revolutionanalytics.com > x <- matrix(rnorm(1e+06), ncol = 10000) > itx <- iteror(x, by = \"row\") > foreach(i = itx, .combine = c) %dopar% mean(i) [1] -0.0069652059  0.0161112989  0.0080068074 -0.0120020610  0.0017168149   [6]  0.0139835943 -0.0078172106 -0.0024762273 -0.0031558268 -0.0072662893  [11] -0.0055142639  0.0015717907 -0.0100842965 -0.0123601527  0.0136420084  [16] -0.0242922105 -0.0126416949 -0.0052951152  0.0216329326 -0.0262476648  [21]  0.0041937609  0.0121253368 -0.0110165729  0.0044267635  0.0080241894  [26]  0.0042995539 -0.0102826632  0.0051185628 -0.0013970812 -0.0172380786  [31]  0.0096079613  0.0046837729 -0.0080726970  0.0083781727 -0.0234620163  [36] -0.0099883966  0.0026883628  0.0029367320  0.0205825899  0.0035303940  [41]  0.0204990426 -0.0010804987 -0.0033665481 -0.0127492019 -0.0147443195  [46]  0.0027046346  0.0016449793  0.0155575490 -0.0003488394 -0.0079238019  [51]  0.0086390030 -0.0039033309  0.0168593825 -0.0067189572 -0.0009925288  [56] -0.0162907048 -0.0059171838  0.0093806072  0.0100886929 -0.0111677408  [61]  0.0021754963 -0.0056770907  0.0081200698 -0.0029828717 -0.0163704350  [66]  0.0057266267 -0.0017156156  0.0214172738 -0.0141379874 -0.0126593342  [71]  0.0087124575  0.0040231519  0.0038515673  0.0066066908  0.0023586046  [76] -0.0044167901 -0.0090543553  0.0010806096  0.0102288061  0.0039881702  [81] -0.0054549319 -0.0127997275 -0.0031697122 -0.0016100996 -0.0143468118  [86]  0.0035904125 -0.0059399479  0.0085565480 -0.0159064868  0.0054120554  [91] -0.0084420572  0.0194448129 -0.0103192553 -0.0062924628  0.0215069258  [96]  0.0015749065  0.0109657488  0.0152237842 -0.0057181022  0.0035530715"},{"path":"https://crowding.github.io/iterors/articles/iterors.html","id":"some-special-iterators","dir":"Articles","previous_headings":"","what":"Some Special Iterators","title":"Using the `iterors` package","text":"notion iterator new R, familiar users languages Python. iterors package includes number special functions generate iterators common scenarios. example, irnorm function creates iterator value drawn specified random normal distribution: Similarly, irunif, irbinom, irpois functions create iterators draw values uniform, binomial, Poisson distributions, respectively. can use functions just used irnorm: random number generators indefinite process, generally, iterators can come end. specify iterator ends, give nextOr second argument, named . icount function returns iterator counts starting one: call nextOr loop can tell nextOr break exit loop. index iteror functions organized task, see vignette(\"categories\", \"iterors\") familiar packages iterators/itertools/itertools2, functions moved. See vignette(\"cross-reference\", \"iterors\") learn build custom iterors, see vignette(\"writing\", \"iterors\")","code":"library(iterors) itrn <- irnorm(10) nextOr(itrn) ##  [1] -1.288066e+00 -2.257544e+00 -4.235529e-01  1.622839e-01 -8.790550e-06 ##  [6]  2.117056e+00  7.755631e-01 -2.678956e-01 -4.103029e-01  3.665932e-01 nextOr(itrn) ##  [1] -1.53138767 -0.17024518  1.53062837  2.39825756  0.39430884 -0.11712952 ##  [7]  0.23778125 -1.17583999  0.04420999 -0.43643477 itru <- irunif(10) nextOr(itru) ##  [1] 0.50887043 0.08224810 0.34341659 0.17990848 0.66638984 0.04670780 ##  [7] 0.09401047 0.36214574 0.02227120 0.46547646 nextOr(itru) ##  [1] 0.6585417 0.3797485 0.3954587 0.7079523 0.7613342 0.8427785 0.8501170 ##  [8] 0.1644071 0.8759730 0.6335973 it <- icount(3) nextOr(it, NULL) ## [1] 1 nextOr(it, NULL) ## [1] 2 nextOr(it, NULL) ## [1] 3 nextOr(it, NULL) #is now ended ## NULL t <- icount(10) total <- 0 repeat {   total <- total + nextOr(it, break) } total # sum of 1:10 ## [1] 0"},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"what-methods-are-needed-for-an-iteror","dir":"Articles","previous_headings":"","what":"What methods are needed for an iteror?","title":"Writing Custom Iterators","text":"Basically, iteror S3 object whose base class \"iteror\", defined methods called nextOr iteror. function iteror generic method. purpose iteror method construct iterator specified object. example, makes iteror list: iteror called list (object without class) finds method iteror.default, constructs iterator returns one element time given vector. x already class \"iteror\" iteror(x) simply returns x, seems odd first. iteror method can defined objects don’t define nextOr method. call objects iterables, meaning can iterate . iterators package defines iteror methods vectors, lists, matrices, data frames, making objects iterables. defining iteror method data types, can pass types directly function expects iterable. want create iterator existing class, can writing iteror method constructs appropriate iterator. alternative write function takes arbitrary arguments, returns iterator. can choose whichever method natural. important method required iterators nextOr(obj, ). Given iteror obj, simply returns next value, forces returns second argument . Returning value = indicates values available iterator. (design) default value ; need specify one. created iterator list; can now call nextOr iterator get values list: shows nextOr behaves stop iteration, returning whatever value given argument . specified NULL, later see ways use second argument.","code":"it <- iteror(list(1:2, 3:4)) nextOr(it, NULL) ## [1] 1 2 nextOr(it, NULL) ## [1] 3 4 nextOr(it, NULL) ## NULL"},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"handling-the-end-of-iteration","dir":"Articles","previous_headings":"","what":"Handling the end of iteration","title":"Writing Custom Iterators","text":"many situations, dealing effectively finite data, data don’t necessarily know length. extract values one time iterator, need handle case isn’t next value. iterors package improves iterators giving options respond end iteration.","code":""},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"breaking-out-of-a-loop-at-end-of-iteration","dir":"Articles","previous_headings":"Handling the end of iteration","what":"Breaking out of a loop at end of iteration","title":"Writing Custom Iterators","text":"consuming iterator loop, easiest (often fastest) way respond end iteration break loop. just put break directly second argument nextOr. argument lazily evaluated, break execute nextOr evaluates second argument. can put code argument, come useful .","code":"x <- icount(10) repeat {   print(nextOr(x, break)) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10"},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"detecting-end-of-iteration-with-a-sigil-value","dir":"Articles","previous_headings":"Handling the end of iteration","what":"Detecting end of iteration with a sigil value","title":"Writing Custom Iterators","text":"Sometimes break return isn’t right action take. saw , nextOr return second argument (whatever ) signal end iteration, iterator contains data. can check whether returned value one provided, interpret end iteration. , nextOr returns NULL, loop exit. special value used like NULL used , often called sigil value.","code":"x <- icount(10) while (!is.null(val <- nextOr(x, NULL))) {   print(val) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10"},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"unsafe-sigil-values","dir":"Articles","previous_headings":"Handling the end of iteration > Detecting end of iteration with a sigil value","what":"Unsafe sigil values","title":"Writing Custom Iterators","text":"’s popular R use NULL sigil, ’s worth considering happen iterator legitimately returns NULL value. instance, list contains tricky values: Suppose iterate list using NULL end--iteration sigil, like : enumeration stops early mistakes NULL, legitimate value list iterating , NULL sigil value. general problem sigil value scheme dynamically-typed languages; value use signal stop, also legitimate value iterator emit.","code":"bad_sigils <- list(   quote(.StopIteration),   NULL,   NA,   list(),   simpleError(\"StopIteration\"),   try(stop(\"StopIteration\", call.=FALSE), silent=TRUE),   \"\",   numeric(0)) it <- iteror(bad_sigils) while (!is.null(val <- nextOr(x, NULL))) {   print(val) }"},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"safe-sigil-values","dir":"Articles","previous_headings":"Handling the end of iteration > Detecting end of iteration with a sigil value","what":"Safe sigil values","title":"Writing Custom Iterators","text":"way escape problem construct one-shot, unique sigil value use locally, just iteror, throw away, keeping code. One easy way using new.env(). Consuming iterator using local sigil value looks like : environments compare reference, newly constructed environment guaranteed identical() object R session, check identity fast (just pointer comparison.) using locally generated, unique sigil value avoid mistaking legitimate value data end iteration.","code":"end_sigil <- new.env() it <- iteror(bad_sigils) repeat {   val <- nextOr(it, end_sigil)   if (identical(val, end_sigil)) break   print(val) } ## .StopIteration ## NULL ## [1] NA ## list() ## <simpleError: StopIteration> ## [1] \"Error : StopIteration\\n\" ## attr(,\"class\") ## [1] \"try-error\" ## attr(,\"condition\") ## <simpleError: StopIteration> ## [1] \"\" ## numeric(0)"},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"a-simple-iterator","dir":"Articles","previous_headings":"","what":"A simple iterator","title":"Writing Custom Iterators","text":"’s time show implementation simple iterator. Although ’ve made sound like write nextOr methods, can use standard one. fact, ’s following examples . method iteror.function takes function specify wraps object class iteror, nextOr method defined. Now ’s function creates simple iterator, one returns value x indefinitely.: Note called internal function nextOr_ underscore, rather nextOr. convention avoid masking standard nextOr generic function. cause problems want iterator call nextOr method another iterator, can quite useful, ’ll see later example. create instance iterator calling iforever function, use calling nextOr method resulting object: can also get values iterator using .numeric. since infinite iterator, need also give argument n argument avoid getting stuck infinite loop run memory: Notice doesn’t make sense implement iterator defining new iteror method, since natural iterable dispatch ; argument 42 just vector length 1 iterator.default already handles case. instead, implement iterator defining normal function returns iterator. iterator quite simple implement, possibly even useful. 2 iterator returned iforever actually just function provided, class iteror added. means get nextOr method already defined, whlch just delegates given function. Additionally since returned object class iteror, inherits iteror method return . course, reason iterator simple doesn’t contain state. iterators need contain state, difficult make return different values eventually stop. Managing state usually real trick writing iterators.","code":"iforever <- function(x) {   nextOr_ <- function(or) x   iteror(nextOr_) } it <- iforever(42) nextOr(it, NULL) ## [1] 42 nextOr(it, NULL) ## [1] 42 as.numeric(it, n=6) ## [1] 42 42 42 42 42 42"},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"a-stateful-iterator-that-stops","dir":"Articles","previous_headings":"","what":"A stateful iterator that stops","title":"Writing Custom Iterators","text":"Let’s modify previous iterator iforever stop returns certain number values. ’ll call new function irep, give another argument called times: Now let’s try : differences iforever irep inner function nextOr_. inner function accesses values variables x times, also modifies value times. accomplished means “<<-=”3 operator, rules lexical scoping. enough calls, inner function find times <= 0, return argument. author iterator signal end iteration. implementing iterator never need anything return appropriate; otherwise leave alone, allowing R lazy treating argument. Technically, kind function refers enclosing variables called closure, fundamental feature R. important thing remember nextOr_ able get value variables passed arguments irep, can modify values using <<- operator. global variables: defined enclosing environment nextOr_ function. can create many iterators want using irep function, work expected without conflicts. Note iterator uses arguments irep store state. state variables needed, can defined anywhere inside irep function.","code":"irep <- function(x, times) {   nextOr_ <- function(or) {     if (times > 0) {       times <<- times - 1       x     } else {       or     }   }    iteror(nextOr_) } it <- irep(7, 6) unlist(as.list(it)) ## [1] 7 7 7 7 7 7"},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"using-an-iterator-inside-an-iterator","dir":"Articles","previous_headings":"","what":"Using an iterator inside an iterator","title":"Writing Custom Iterators","text":"previous section described general way writing custom iterators. Almost iterator can written using basic techniques. times, may simpler make use existing iterator implement new iterator. Let’s say need iterator splits vector subvectors. can allow process vector parallel, still use vector operations, essential getting good sequential performance R. following function returns just iterator: ivector uses ... pass options idiv. idiv supports chunks argument split argument specified number pieces, chunkSize argument split pieces specified maximum size. Let’s create ivector iterator split vector three pieces using chunks argument: Note nextOr_ function handles end iteration. underlying idiv iterator reaches end, force argument, specified return(), Although forced underlying iterator, R correctly evaluates return call lazy argument according scope call written . internal idiv reaches end, forces argument, nextOr_ passes signal along returning argument. nextOr method uses lazy evaluated argument expressly purpose, can respond end iteration using control flow operator like return, break, next stop. clear minor modification need made function create iterator blocks rows columns matrix data frame. ’ll leave exercise reader.","code":"ivector <- function(x, ...) {  i <- 1  it <- idiv(length(x), ...)   nextOr_ <- function(or) {    n <- nextOr(it, return(or))    ix <- seq(i, length=n)    i <<- i + n    x[ix]  }   iteror(nextOr_) } it <- ivector(1:25, chunks=3) as.list(it) ## [[1]] ## [1] 1 2 3 4 5 6 7 8 9 ##  ## [[2]] ## [1] 10 11 12 13 14 15 16 17 ##  ## [[3]] ## [1] 18 19 20 21 22 23 24 25"},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"a-recycling-iterator","dir":"Articles","previous_headings":"","what":"A recycling iterator","title":"Writing Custom Iterators","text":"can start compose simple iterators together complex things writing functions take one iterator construct new one. example, ’ll return iterator recycles values wrapped iterator: 4 fairly nice, note another one infinite iterators need careful . Also, make sure don’t pass infinite iterator i_recycle. pointless course, since ’s reason recycle iterator never ends. possible write avoid problem grabbing values right front, still end saving values never recycled, ’ve opted keep simple. Let’s try :","code":"i_recycle <- function(it) {   values <- as.list(iteror(it))   i <- length(values)    nextOr_ <- function(or) {     i <<- i + 1     if (i > length(values)) i <<- 1     values[[i]]   }    iteror(nextOr_) } it <- i_recycle(icount(3)) unlist(as.list(it, n=9)) ## [1] 1 2 3 1 2 3 1 2 3"},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"limiting-infinite-iterators","dir":"Articles","previous_headings":"","what":"Limiting infinite iterators","title":"Writing Custom Iterators","text":"tempted add argument i_recycle function limit number values returns, sometimes want recycle awhile, forever. didn’t , rather make i_recycle complicated, decided write another function takes iterator returns modified iterator. Functions like composable; limiting function can applied underlying iterator instead just i_recycle. convention, iterors package uses prefix i_ kind composing iterator function, bare functions build iterator based basic data. Note looks awful lot like irep function implemented previously. fact, using i_limit, can implement irep using iforever much simply, without duplication code: demonstrate irep2: ’s one last example. Let’s recycle vector three times using i_limit, convert back vector using .numeric: Sort complicated version : Aren’t iterators fun?","code":"i_limit <- function(it, times) {   it <- iteror(it)    nextOr_ <- function(or) {     if (times > 0) {       times <<- times - 1       nextOr(it, or)     } else       return(or)   }    iteror(nextOr_) } irep2 <- function(x, times)   i_limit(iforever(x), times) it <- irep2('foo', 3) repeat {   print(nextOr(it, break)) } ## [1] \"foo\" ## [1] \"foo\" ## [1] \"foo\" iterable <- 1:3 n <- 3 it <- i_limit(i_recycle(iterable), n * length(iterable)) as.numeric(it) ## [1] 1 2 3 1 2 3 1 2 3 rep(iterable, n) ## [1] 1 2 3 1 2 3 1 2 3"},{"path":"https://crowding.github.io/iterors/articles/writing.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Writing Custom Iterators","text":"Writing iterators can quite simple, yet useful powerful. provides effective way extend capabilities packages use iterators, foreach package. writing iterators wrap iterators, possible put together powerful flexible set tools work well together, can solve many complex problems come parallel computing.","code":""},{"path":"https://crowding.github.io/iterors/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Meilstrup. Maintainer, author, copyright holder. Folashade Daniel. Author. Revolution Analytics. Author, copyright holder. Steve Weston. Author, copyright holder. John . Ramey. Author, copyright holder. Kayla Schaefer. Author. Hadley Wickham. Author.","code":""},{"path":"https://crowding.github.io/iterors/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Meilstrup P, Daniel F, Analytics R, Weston S, Ramey J, Schaefer K, Wickham H (2023). iterors: Efficient, Compact Iterators Tools. https://github.com/crowding/iterors, https://crowding.github.io/iterors/.","code":"@Manual{,   title = {iterors: Efficient, Compact Iterators and Tools},   author = {Peter Meilstrup and Folashade Daniel and Revolution Analytics and Steve Weston and John A. Ramey and Kayla Schaefer and Hadley Wickham},   year = {2023},   note = {https://github.com/crowding/iterors, https://crowding.github.io/iterors/}, }"},{"path":"https://crowding.github.io/iterors/index.html","id":"the-iterors-package-fast-compact-iterators-and-tools","dir":"","previous_headings":"","what":"Efficient, Compact Iterators and Tools","title":"Efficient, Compact Iterators and Tools","text":"fresh take iterators R, leading faster, shorter code.","code":""},{"path":"https://crowding.github.io/iterors/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Efficient, Compact Iterators and Tools","text":"Main method nextOr(iter, ); allows simpler faster code. iteror objects cross-compatible existing code using iterators (foreach package.) Optimized performance, often several times less overhead per item. Compatible Python iterators, via reticulate package. Comes batteries included: complete collection iterator functions, ported, curated harmonized packages iterators, itertools, itertools2,","code":""},{"path":"https://crowding.github.io/iterors/index.html","id":"how-is-it-different-from-iterators","dir":"","previous_headings":"","what":"How is it different from iterators?","title":"Efficient, Compact Iterators and Tools","text":"iterors uses method nextOr(, ) retrieve next element. trick second argument lazily evaluated, can specify return value action take end iteration. particular, can control flow operator like break next return. example, can compute sum iteror : contrast existing iterators package: package nextElem signals end iteration throwing exception, means iterator code happened inside tryCatch. Computing sum iterator looked like : Besides requiring less boilerplate, iterator code written using nextOr also performs faster, particularly using higher-order iterator functions. tryCatch relatively expensive operation R, especially used per item. also possible(*) use break next exit outer loop inside tryCatch handler function. nextOr designed use mind. benchmarking vignette illustrates computations using iterors can execute several times faster using iterators. iterors package grew , complement , generators implemented async package. async::gen lets construct iterators complex logic, using familiar imperative code flow control constructs like , switch . Meanwhile, functions package iterors let manipulate output generator functional style. two packages form two complementary ways can work sequential processes.","code":"total <- 0 repeat   total <- total + nextOr(it, break) total <- 0 tryCatch(   repeat total <- total + nextElem(it),   error=function(x) {     if (conditionMessage(x) != \"StopIteration\") stop(x)   } )"},{"path":"https://crowding.github.io/iterors/index.html","id":"more-reading","dir":"","previous_headings":"","what":"More reading","title":"Efficient, Compact Iterators and Tools","text":"quick introduction, see vignette(\"iterors\") index iteror functions organized task, see vignette(\"categories\", \"iterors\") familiar packages iterators/itertools/itertools2, functions moved. See vignette(\"cross-reference\", \"iterors\") learn build custom iterors, see vignette(\"writing\", \"iterors\")","code":""},{"path":"https://crowding.github.io/iterors/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Efficient, Compact Iterators and Tools","text":"prerelease, run following installing devtools: package released, able install stable version CRAN:","code":"devtools::install_github('crowding/iterors') install.packages('iterors', dependencies=TRUE)"},{"path":"https://crowding.github.io/iterors/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Efficient, Compact Iterators and Tools","text":"GPL-3","code":""},{"path":"https://crowding.github.io/iterors/reference/as.vector.iteror.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect all (or some given number of) values from an iteror,\nreturning a vector of the given type. — as.list.iteror","title":"Collect all (or some given number of) values from an iteror,\nreturning a vector of the given type. — as.list.iteror","text":"Collect (given number ) values iteror, returning vector given type.","code":""},{"path":"https://crowding.github.io/iterors/reference/as.vector.iteror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect all (or some given number of) values from an iteror,\nreturning a vector of the given type. — as.list.iteror","text":"","code":"# S3 method for iteror as.list(x, n = as.integer(2^31 - 1), ...)  # S3 method for iteror as.double(x, n = as.integer(2^31 - 1), ...)  # S3 method for iteror as.numeric(x, n = as.integer(2^31 - 1), ...)  # S3 method for iteror as.logical(x, n = as.integer(2^31 - 1), ...)  # S3 method for iteror as.character(x, n = as.integer(2^31 - 1), ...)  # S3 method for iteror as.vector(x, mode)"},{"path":"https://crowding.github.io/iterors/reference/as.vector.iteror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect all (or some given number of) values from an iteror,\nreturning a vector of the given type. — as.list.iteror","text":"x iterable object n maximum number elements return. ... Unused arguments throw error. mode mode use output vector.","code":""},{"path":"https://crowding.github.io/iterors/reference/as.vector.iteror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect all (or some given number of) values from an iteror,\nreturning a vector of the given type. — as.list.iteror","text":"returned value n elements long iterator stop.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/concat.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate contents of multiple iterators into a vector. — concat","title":"Concatenate contents of multiple iterators into a vector. — concat","text":"concat collects values iterable object, pastes end end one vector.  words concat .list.iteror c list.","code":""},{"path":"https://crowding.github.io/iterors/reference/concat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate contents of multiple iterators into a vector. — concat","text":"","code":"concat(obj, mode = \"list\", n = as.integer(2^31 - 1), ...)  # S3 method for default concat(obj, mode = \"list\", n = as.integer(2^31 - 1), ...)  # S3 method for iteror concat(obj, mode = \"list\", n = Inf, length.out = Inf, ...)"},{"path":"https://crowding.github.io/iterors/reference/concat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate contents of multiple iterators into a vector. — concat","text":"obj iteror. mode mode vector return. n maximum number input elements extract iteror. ... passed along iteror constructor. length.approximate size output vector (elements pasted together). iteror ends (emits N elements) emitting many, result. iterator end early output least length.elements (depending large last chunk .)","code":""},{"path":"https://crowding.github.io/iterors/reference/concat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate contents of multiple iterators into a vector. — concat","text":"","code":"it <- i_apply(icount(), seq_len) # [1], [1, 2], [1, 2, 3], ... concat(it, n=4, mode=\"numeric\")  # [1, 1, 2, 1, 2, 3, 1, 2, 3, 4] #>  [1] 1 1 2 1 2 3 1 2 3 4"},{"path":"https://crowding.github.io/iterors/reference/consume.html","id":null,"dir":"Reference","previous_headings":"","what":"Consumes the first n elements of an iterator — consume","title":"Consumes the first n elements of an iterator — consume","text":"Advances iterator n-steps ahead without returning anything.","code":""},{"path":"https://crowding.github.io/iterors/reference/consume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consumes the first n elements of an iterator — consume","text":"","code":"consume(obj, n = Inf, ...)  # S3 method for iteror consume(obj, n = Inf, ...)"},{"path":"https://crowding.github.io/iterors/reference/consume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consumes the first n elements of an iterator — consume","text":"obj iterable object n number elements consume. ... passed along iteror constructor.","code":""},{"path":"https://crowding.github.io/iterors/reference/consume.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consumes the first n elements of an iterator — consume","text":"obj, invisibly.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/consume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Consumes the first n elements of an iterator — consume","text":"","code":"it <- iteror(1:10) # Skips the first 5 elements consume(it, n=5) # Returns 6 nextOr(it, NA) #> [1] 6  it2 <- iteror(letters) # Skips the first 4 elements consume(it2, 4) # Returns 'e' nextOr(it2, NA) #> [1] \"e\""},{"path":"https://crowding.github.io/iterors/reference/count.html","id":null,"dir":"Reference","previous_headings":"","what":"Consumes an iterator and computes its length — count","title":"Consumes an iterator and computes its length — count","text":"Counts number elements iterator. NOTE: iterator consumed process.","code":""},{"path":"https://crowding.github.io/iterors/reference/count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consumes an iterator and computes its length — count","text":"","code":"count(object, ...)"},{"path":"https://crowding.github.io/iterors/reference/count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consumes an iterator and computes its length — count","text":"object iterable object ... passed along iteror constructor.","code":""},{"path":"https://crowding.github.io/iterors/reference/count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consumes an iterator and computes its length — count","text":"number elements iterator","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Consumes an iterator and computes its length — count","text":"","code":"count(1:5) == length(1:5) #> [1] TRUE  it <- iteror(1:5) count(it) == length(1:5) #> [1] TRUE  it2 <- i_chain(1:3, 4:5, 6) count(it2) #> [1] 6  it3 <- i_chain(1:3, levels(iris$Species)) count(it3) #> [1] 6"},{"path":"https://crowding.github.io/iterors/reference/dotproduct.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the dot product of two iterable objects — dotproduct","title":"Computes the dot product of two iterable objects — dotproduct","text":"Returns dot product two numeric iterables equal length","code":""},{"path":"https://crowding.github.io/iterors/reference/dotproduct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the dot product of two iterable objects — dotproduct","text":"","code":"dotproduct(vec1, vec2)"},{"path":"https://crowding.github.io/iterors/reference/dotproduct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the dot product of two iterable objects — dotproduct","text":"vec1 first vec2 second iterable object","code":""},{"path":"https://crowding.github.io/iterors/reference/dotproduct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the dot product of two iterable objects — dotproduct","text":"dot product iterators","code":""},{"path":"https://crowding.github.io/iterors/reference/dotproduct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the dot product of two iterable objects — dotproduct","text":"","code":"it <- iteror(1:3) it2 <- iteror(4:6) dotproduct(it, it2) # 32 #> [1] 32  it <- iteror(1:4) it2 <- iteror(7:10) dotproduct(1:4, 7:10) # 90 #> [1] 90"},{"path":"https://crowding.github.io/iterors/reference/hasNext.html","id":null,"dir":"Reference","previous_headings":"","what":"Does This Iterator Have A Next Element — hasNext","title":"Does This Iterator Have A Next Element — hasNext","text":"wrapped <- ihasnext(obj) wraps iteror object ihasNext class. hasNext(wrapped) indicate iterator another element.","code":""},{"path":"https://crowding.github.io/iterors/reference/hasNext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does This Iterator Have A Next Element — hasNext","text":"","code":"hasNext(obj, ...)  ihasNext(obj, ...)"},{"path":"https://crowding.github.io/iterors/reference/hasNext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does This Iterator Have A Next Element — hasNext","text":"obj iterable ... extra arguments may passed along iteror.","code":""},{"path":"https://crowding.github.io/iterors/reference/hasNext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does This Iterator Have A Next Element — hasNext","text":"Logical value indicating whether iterator next element.","code":""},{"path":"https://crowding.github.io/iterors/reference/hasNext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Does This Iterator Have A Next Element — hasNext","text":"class ihasNext introduced itertools package try lessen boilerplate around extracting next value using iterators::nextElem.  ihasNext included iterors continuity; however, needed purpose using nextOr iteration method, can directly give action take end iteration.","code":""},{"path":"https://crowding.github.io/iterors/reference/hasNext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does This Iterator Have A Next Element — hasNext","text":"","code":"# The bad old style of consuming an iterator in a loop with `nextElem`:   it <- ihasNext(iteror(c('a', 'b', 'c')))   tryCatch(repeat {     print(iterators::nextElem(it))   }, error=function(err) {     if (conditionMessage(err) != \"StopIteration\")       stop(err)   }) #> [1] \"a\" #> [1] \"b\" #> [1] \"c\"  # with ihasNext, this became:   it <- ihasNext(iteror(c('a', 'b', 'c')))   while (hasNext(it))     print(iterators::nextElem(it)) #> [1] \"a\" #> [1] \"b\" #> [1] \"c\"  # But using `nextOr` all you need is:   iteror(c('a', 'b', 'c')) #> function (or)  #> { #>     if (i >= count) { #>         or #>     } #>     else { #>         i <<- i + 1 #>         obj[[i]] #>     } #> } #> <bytecode: 0x55ea1d8b1b48> #> <environment: 0x55ea1ec059d0> #> attr(,\"class\") #> [1] \"iteror\" \"iter\"     repeat print(nextOr(it, break))"},{"path":"https://crowding.github.io/iterors/reference/iRNGStream.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterators over parallel random-number seeds. — iRNGStream","title":"Iterators over parallel random-number seeds. — iRNGStream","text":"iRNGStream creates sequence random number seeds \"far apart\" (2^127 steps) overall random number sequence, can used make parallel, psudo-independent random iterator. uses nextRNGStream \"L'Ecuyer-CMRG\" generator (details mechanism, see vignette(\"parallel\", package=\"parallel\").)","code":""},{"path":"https://crowding.github.io/iterors/reference/iRNGStream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterators over parallel random-number seeds. — iRNGStream","text":"","code":"iRNGStream(seed)"},{"path":"https://crowding.github.io/iterors/reference/iRNGStream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterators over parallel random-number seeds. — iRNGStream","text":"seed Either single number passed set.seed vector passed nextRNGStream nextRNGSubStream.","code":""},{"path":"https://crowding.github.io/iterors/reference/iRNGStream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterators over parallel random-number seeds. — iRNGStream","text":"iRNGSubStream creates seeds somewhat less far apart (2^76 steps), can used \"substream\" seeds Originally itertools package.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/iRNGStream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterators over parallel random-number seeds. — iRNGStream","text":"","code":"global.seed <- .Random.seed #> Error in eval(expr, envir, enclos): object '.Random.seed' not found  rng.seeds <- iRNGStream(313) print(nextOr(rng.seeds)) #> [1]       10407  -148706266   816896415  -423200657    64647451 -1536586263 #> [7]    64930425 print(nextOr(rng.seeds)) #> [1]       10407   147611069   397195254   280483519 -1571776966 -1788649533 #> [7]  -335749277  # create three pseudo-independent and # reproducible random number generators it1 <- isample(c(0, 1), 1, seed=nextOr(rng.seeds)) it2 <- isample(c(0, 1), 1, seed=nextOr(rng.seeds)) it3 <- isample(c(0, 1), 1, seed=nextOr(rng.seeds))  .Random.seed == global.seed #> Error in eval(expr, envir, enclos): object '.Random.seed' not found take(it1, 5, \"numeric\") # 0 0 0 1 1 #> [1] 1 0 1 1 1 take(it2, 5, \"numeric\") # 0 1 1 1 1 #> [1] 0 0 0 1 0 take(it3, 5, \"numeric\") # 1 1 1 0 0 #> [1] 0 1 0 0 0  # none of this affects the global seed global.seed == .Random.seed #> Error in eval(expr, envir, enclos): object 'global.seed' not found  if (FALSE) { library(foreach) foreach(1:3, rseed=iRNGSubStream(1970), .combine='c') %dopar% {   RNGkind(\"L'Ecuyer-CMRG\") # would be better to initialize workers only once   assign('.Random.seed', rseed, pos=.GlobalEnv)   runif(1) } }"},{"path":"https://crowding.github.io/iterors/reference/i_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to each element of an iterator. — i_apply","title":"Apply a function to each element of an iterator. — i_apply","text":"i_apply(obj, f) returns iteror applies f element given iterable obj. iterator equivalent lapply.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to each element of an iterator. — i_apply","text":"","code":"i_apply(obj, f, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to each element of an iterator. — i_apply","text":"obj iterable. f function ... Additional arguments passed along f","code":""},{"path":"https://crowding.github.io/iterors/reference/i_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to each element of an iterator. — i_apply","text":"iteror.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/i_break.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an iterator that can be told to stop — i_break","title":"Create an iterator that can be told to stop — i_break","text":"Create iterator iterates another iterator specified function returns FALSE. can useful breaking foreach loop, example.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_break.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an iterator that can be told to stop — i_break","text":"","code":"i_break(iterable, finished, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_break.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an iterator that can be told to stop — i_break","text":"iterable Iterable iterate . finished Function returns logical value.  iterator stops function returns FALSE. ... arguments forwarded iteror.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_break.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an iterator that can be told to stop — i_break","text":"Originally itertools package.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_break.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an iterator that can be told to stop — i_break","text":"","code":"# See how high we can count in a tenth of a second mkfinished <- function(time) {   starttime <- proc.time()[3]   function() proc.time()[3] > starttime + time } length(as.list(i_break(icount(), mkfinished(0.1)))) #> [1] 14798"},{"path":"https://crowding.github.io/iterors/reference/i_chain.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteror that chains multiple arguments together into a single iterator — i_concat","title":"Iteror that chains multiple arguments together into a single iterator — i_concat","text":"i_concat(obj) takes iterable returns iterables, chains together inner values iterables one iterator. Analogous unlist(recursive=FALSE). i_chain iterators analogous c() vectors. i_chain constructs iteror returns elements first argument exhausted, elements next argument, arguments exhausted.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_chain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteror that chains multiple arguments together into a single iterator — i_concat","text":"","code":"i_concat(obj, ...)  i_chain(...)"},{"path":"https://crowding.github.io/iterors/reference/i_chain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteror that chains multiple arguments together into a single iterator — i_concat","text":"obj iterable. ... multiple iterable arguments","code":""},{"path":"https://crowding.github.io/iterors/reference/i_chain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteror that chains multiple arguments together into a single iterator — i_concat","text":"iteror iterates argument sequence","code":""},{"path":"https://crowding.github.io/iterors/reference/i_chain.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Iteror that chains multiple arguments together into a single iterator — i_concat","text":"Peter Meilstrup","code":""},{"path":"https://crowding.github.io/iterors/reference/i_chain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteror that chains multiple arguments together into a single iterator — i_concat","text":"","code":"it <- i_chain(1:3, 4:5, 6) as.list(it) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 4 #>  #> [[5]] #> [1] 5 #>  #> [[6]] #> [1] 6 #>   it2 <- i_chain(1:3, levels(iris$Species)) as.list(it2) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] \"setosa\" #>  #> [[5]] #> [1] \"versicolor\" #>  #> [[6]] #> [1] \"virginica\" #>"},{"path":"https://crowding.github.io/iterors/reference/i_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a chunking iterator — i_chunk","title":"Create a chunking iterator — i_chunk","text":"Create iterator issues lists values underlying iterable. useful manually “chunking” values iterable.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a chunking iterator — i_chunk","text":"","code":"i_chunk(iterable, size, mode = \"list\", fill, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a chunking iterator — i_chunk","text":"iterable Iterable iterate . size Maximum number values iterable return value issued resulting iterator. mode Mode objects returned iterator. fill Value use pad last chunk size, short. missing, padding done. ... arguments forwarded iteror(iterable, ...).","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/i_chunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a chunking iterator — i_chunk","text":"","code":"# Split the vector 1:10 into \"chunks\" with a maximum length of three it <- i_chunk(1:10, 3) repeat print(unlist(nextOr(it, break))) #> [1] 1 2 3 #> [1] 4 5 6 #> [1] 7 8 9 #> [1] 10  # Same as previous, but return integer vectors rather than lists it <- i_chunk(1:10, 3, mode='integer') repeat print(unlist(nextOr(it, break))) #> [1] 1 2 3 #> [1] 4 5 6 #> [1] 7 8 9 #> [1] 10  #' it <- i_chunk(iterators::iter(1:5), 2, fill=NA) # List: list(1, 2, 3) nextOr(it, NULL) #> NULL # List: list(4, 5, NA) nextOr(it, NULL) #> NULL  it2 <- i_chunk(levels(iris$Species), 4, fill=\"weeee\") # Returns: list(\"setosa\", \"versicolor\", \"virginica\", \"weeee\") nextOr(it2, NA) #> [[1]] #> [1] \"setosa\" #>  #> [[2]] #> [1] \"versicolor\" #>  #> [[3]] #> [1] \"virginica\" #>  #> [[4]] #> [1] \"weeee\" #>"},{"path":"https://crowding.github.io/iterors/reference/i_dropwhile.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that drops elements until the predicate function returns FALSE — i_dropwhile","title":"Iterator that drops elements until the predicate function returns FALSE — i_dropwhile","text":"Constructs iterator drops elements iterable object long predicate function true; afterwards, every element iterable object returned.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_dropwhile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that drops elements until the predicate function returns FALSE — i_dropwhile","text":"","code":"i_dropwhile(object, predicate, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_dropwhile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that drops elements until the predicate function returns FALSE — i_dropwhile","text":"object iterable object predicate function determines whether element TRUE FALSE. function assumed take one argument. ... arguments forwarded iteror.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_dropwhile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that drops elements until the predicate function returns FALSE — i_dropwhile","text":"iteror object.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_dropwhile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator that drops elements until the predicate function returns FALSE — i_dropwhile","text":"iterator return elements predicate first becomes false, may lengthy start-time elements returned.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_dropwhile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that drops elements until the predicate function returns FALSE — i_dropwhile","text":"","code":"# Filters out numbers exceeding 3 not_too_large <- function(x) {   x <= 3 } it <- i_dropwhile(1:8, not_too_large) as.list(it) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] 5 #>  #> [[3]] #> [1] 6 #>  #> [[4]] #> [1] 7 #>  #> [[5]] #> [1] 8 #>   # Same approach but uses an anonymous function it2 <- i_dropwhile(seq(2, 20, by=2), function(x) x <= 10) as.list(it2) #> [[1]] #> [1] 12 #>  #> [[2]] #> [1] 14 #>  #> [[3]] #> [1] 16 #>  #> [[4]] #> [1] 18 #>  #> [[5]] #> [1] 20 #>"},{"path":"https://crowding.github.io/iterors/reference/i_enumerate.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that returns the elements of an object along with their indices — i_enumerate","title":"Iterator that returns the elements of an object along with their indices — i_enumerate","text":"Constructs iterator returns elements object along element's indices. Enumeration useful looping object counter required. i_enumerate method arrays allows splitting array arbitrary margins, including multiple margins. index element returned vector (chunking used, matrix) indices.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_enumerate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that returns the elements of an object along with their indices — i_enumerate","text":"","code":"i_enumerate(obj, ...)  ienumerate(obj, ...)  # S3 method for default i_enumerate(obj, ..., recycle = FALSE, chunkSize, chunks)  i_enum(obj, ...)  # S3 method for array i_enumerate(   obj,   ...,   recycle = FALSE,   chunkSize,   chunks,   by = c(\"cell\", \"row\", \"column\"),   rowMajor = TRUE,   drop = FALSE )"},{"path":"https://crowding.github.io/iterors/reference/i_enumerate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that returns the elements of an object along with their indices — i_enumerate","text":"obj object return indefinitely. ... Undocumented. recycle Whether restart iterator finishing array. chunkSize large chunk take along specified dimension. chunks many chunks divide array . array margins iterate . Can \"row\", \"col\", \"cell\", vector numerical indices. rowMajor TRUE, first index varies fastest, FALSE, last index varies fastest. drop Whether drop marginalized dimensions. chunking used, effect.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_enumerate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that returns the elements of an object along with their indices — i_enumerate","text":"iterator returns values obj along index object.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_enumerate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator that returns the elements of an object along with their indices — i_enumerate","text":"function intended follow convention used Python's enumerate function primary difference list returned instead Python's tuple construct. call nextElem returns list two elements: index: counter value: current value object i_enum alias i_enumerate save keystrokes. First appeared package iterators2. two closely closely related functions: i_enumerate accepts iterable, emit single index starting 1. ienumerate generic methods vectors arrays, supporting chunking recycling options, returning multiple indices arrays.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_enumerate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Iterator that returns the elements of an object along with their indices — i_enumerate","text":"Peter Meilstrup","code":""},{"path":"https://crowding.github.io/iterors/reference/i_enumerate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that returns the elements of an object along with their indices — i_enumerate","text":"","code":"set.seed(42) it <- i_enumerate(rnorm(5)) as.list(it) #> [[1]] #> [[1]]$index #> [1] 1 #>  #> [[1]]$value #> [1] 1.370958 #>  #>  #> [[2]] #> [[2]]$index #> [1] 2 #>  #> [[2]]$value #> [1] -0.5646982 #>  #>  #> [[3]] #> [[3]]$index #> [1] 3 #>  #> [[3]]$value #> [1] 0.3631284 #>  #>  #> [[4]] #> [[4]]$index #> [1] 4 #>  #> [[4]]$value #> [1] 0.6328626 #>  #>  #> [[5]] #> [[5]]$index #> [1] 5 #>  #> [[5]]$value #> [1] 0.4042683 #>  #>   # Iterates through the columns of the iris data.frame it2 <- i_enum(iris) nextOr(it2, NA) #> $index #> [1] 1 #>  #> $value #>   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 #>  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 #>  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 #>  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 #>  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 #>  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 #> [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 #> [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 #> [145] 6.7 6.7 6.3 6.5 6.2 5.9 #>  nextOr(it2, NA) #> $index #> [1] 2 #>  #> $value #>   [1] 3.5 3.0 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 3.7 3.4 3.0 3.0 4.0 4.4 3.9 3.5 #>  [19] 3.8 3.8 3.4 3.7 3.6 3.3 3.4 3.0 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2 #>  [37] 3.5 3.6 3.0 3.4 3.5 2.3 3.2 3.5 3.8 3.0 3.8 3.2 3.7 3.3 3.2 3.2 3.1 2.3 #>  [55] 2.8 2.8 3.3 2.4 2.9 2.7 2.0 3.0 2.2 2.9 2.9 3.1 3.0 2.7 2.2 2.5 3.2 2.8 #>  [73] 2.5 2.8 2.9 3.0 2.8 3.0 2.9 2.6 2.4 2.4 2.7 2.7 3.0 3.4 3.1 2.3 3.0 2.5 #>  [91] 2.6 3.0 2.6 2.3 2.7 3.0 2.9 2.9 2.5 2.8 3.3 2.7 3.0 2.9 3.0 3.0 2.5 2.9 #> [109] 2.5 3.6 3.2 2.7 3.0 2.5 2.8 3.2 3.0 3.8 2.6 2.2 3.2 2.8 2.8 2.7 3.3 3.2 #> [127] 2.8 3.0 2.8 3.0 2.8 3.8 2.8 2.8 2.6 3.0 3.4 3.1 3.0 3.1 3.1 3.1 2.7 3.2 #> [145] 3.3 3.0 2.5 3.0 3.4 3.0 #>  nextOr(it2, NA) #> $index #> [1] 3 #>  #> $value #>   [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 1.5 1.6 1.4 1.1 1.2 1.5 1.3 1.4 #>  [19] 1.7 1.5 1.7 1.5 1.0 1.7 1.9 1.6 1.6 1.5 1.4 1.6 1.6 1.5 1.5 1.4 1.5 1.2 #>  [37] 1.3 1.4 1.3 1.5 1.3 1.3 1.3 1.6 1.9 1.4 1.6 1.4 1.5 1.4 4.7 4.5 4.9 4.0 #>  [55] 4.6 4.5 4.7 3.3 4.6 3.9 3.5 4.2 4.0 4.7 3.6 4.4 4.5 4.1 4.5 3.9 4.8 4.0 #>  [73] 4.9 4.7 4.3 4.4 4.8 5.0 4.5 3.5 3.8 3.7 3.9 5.1 4.5 4.5 4.7 4.4 4.1 4.0 #>  [91] 4.4 4.6 4.0 3.3 4.2 4.2 4.2 4.3 3.0 4.1 6.0 5.1 5.9 5.6 5.8 6.6 4.5 6.3 #> [109] 5.8 6.1 5.1 5.3 5.5 5.0 5.1 5.3 5.5 6.7 6.9 5.0 5.7 4.9 6.7 4.9 5.7 6.0 #> [127] 4.8 4.9 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 4.8 5.4 5.6 5.1 5.1 5.9 #> [145] 5.7 5.2 5.0 5.2 5.4 5.1 #>  nextOr(it2, NA) #> $index #> [1] 4 #>  #> $value #>   [1] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 0.2 0.2 0.1 0.1 0.2 0.4 0.4 0.3 #>  [19] 0.3 0.3 0.2 0.4 0.2 0.5 0.2 0.2 0.4 0.2 0.2 0.2 0.2 0.4 0.1 0.2 0.2 0.2 #>  [37] 0.2 0.1 0.2 0.2 0.3 0.3 0.2 0.6 0.4 0.3 0.2 0.2 0.2 0.2 1.4 1.5 1.5 1.3 #>  [55] 1.5 1.3 1.6 1.0 1.3 1.4 1.0 1.5 1.0 1.4 1.3 1.4 1.5 1.0 1.5 1.1 1.8 1.3 #>  [73] 1.5 1.2 1.3 1.4 1.4 1.7 1.5 1.0 1.1 1.0 1.2 1.6 1.5 1.6 1.5 1.3 1.3 1.3 #>  [91] 1.2 1.4 1.2 1.0 1.3 1.2 1.3 1.3 1.1 1.3 2.5 1.9 2.1 1.8 2.2 2.1 1.7 1.8 #> [109] 1.8 2.5 2.0 1.9 2.1 2.0 2.4 2.3 1.8 2.2 2.3 1.5 2.3 2.0 2.0 1.8 2.1 1.8 #> [127] 1.8 1.8 2.1 1.6 1.9 2.0 2.2 1.5 1.4 2.3 2.4 1.8 1.8 2.1 2.4 2.3 1.9 2.3 #> [145] 2.5 2.3 1.9 2.0 2.3 1.8 #>  nextOr(it2, NA) #> $index #> [1] 5 #>  #> $value #>   [1] setosa     setosa     setosa     setosa     setosa     setosa     #>   [7] setosa     setosa     setosa     setosa     setosa     setosa     #>  [13] setosa     setosa     setosa     setosa     setosa     setosa     #>  [19] setosa     setosa     setosa     setosa     setosa     setosa     #>  [25] setosa     setosa     setosa     setosa     setosa     setosa     #>  [31] setosa     setosa     setosa     setosa     setosa     setosa     #>  [37] setosa     setosa     setosa     setosa     setosa     setosa     #>  [43] setosa     setosa     setosa     setosa     setosa     setosa     #>  [49] setosa     setosa     versicolor versicolor versicolor versicolor #>  [55] versicolor versicolor versicolor versicolor versicolor versicolor #>  [61] versicolor versicolor versicolor versicolor versicolor versicolor #>  [67] versicolor versicolor versicolor versicolor versicolor versicolor #>  [73] versicolor versicolor versicolor versicolor versicolor versicolor #>  [79] versicolor versicolor versicolor versicolor versicolor versicolor #>  [85] versicolor versicolor versicolor versicolor versicolor versicolor #>  [91] versicolor versicolor versicolor versicolor versicolor versicolor #>  [97] versicolor versicolor versicolor versicolor virginica  virginica  #> [103] virginica  virginica  virginica  virginica  virginica  virginica  #> [109] virginica  virginica  virginica  virginica  virginica  virginica  #> [115] virginica  virginica  virginica  virginica  virginica  virginica  #> [121] virginica  virginica  virginica  virginica  virginica  virginica  #> [127] virginica  virginica  virginica  virginica  virginica  virginica  #> [133] virginica  virginica  virginica  virginica  virginica  virginica  #> [139] virginica  virginica  virginica  virginica  virginica  virginica  #> [145] virginica  virginica  virginica  virginica  virginica  virginica  #> Levels: setosa versicolor virginica #>   a <- array(1:27, c(3, 3, 3)) as.list(i_enumerate(a, by=c(1, 2), drop=TRUE)) #> [[1]] #> [[1]]$index #> [1] 1 1 #>  #> [[1]]$value #> [1]  1 10 19 #>  #>  #> [[2]] #> [[2]]$index #> [1] 2 1 #>  #> [[2]]$value #> [1]  2 11 20 #>  #>  #> [[3]] #> [[3]]$index #> [1] 3 1 #>  #> [[3]]$value #> [1]  3 12 21 #>  #>  #> [[4]] #> [[4]]$index #> [1] 1 2 #>  #> [[4]]$value #> [1]  4 13 22 #>  #>  #> [[5]] #> [[5]]$index #> [1] 2 2 #>  #> [[5]]$value #> [1]  5 14 23 #>  #>  #> [[6]] #> [[6]]$index #> [1] 3 2 #>  #> [[6]]$value #> [1]  6 15 24 #>  #>  #> [[7]] #> [[7]]$index #> [1] 1 3 #>  #> [[7]]$value #> [1]  7 16 25 #>  #>  #> [[8]] #> [[8]]$index #> [1] 2 3 #>  #> [[8]]$value #> [1]  8 17 26 #>  #>  #> [[9]] #> [[9]]$index #> [1] 3 3 #>  #> [[9]]$value #> [1]  9 18 27 #>  #>  as.list(i_enumerate(a, by=c(3), drop=FALSE)) #> [[1]] #> [[1]]$index #> [1] 1 #>  #> [[1]]$value #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2    5    8 #> [3,]    3    6    9 #>  #>  #>  #> [[2]] #> [[2]]$index #> [1] 2 #>  #> [[2]]$value #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]   10   13   16 #> [2,]   11   14   17 #> [3,]   12   15   18 #>  #>  #>  #> [[3]] #> [[3]]$index #> [1] 3 #>  #> [[3]]$value #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]   19   22   25 #> [2,]   20   23   26 #> [3,]   21   24   27 #>  #>  #>  as.list(i_enumerate(a, by=c(2, 3), chunkSize=7)) #> [[1]] #> [[1]]$index #>      [,1] [,2] #> [1,]    1    1 #> [2,]    2    1 #> [3,]    3    1 #> [4,]    1    2 #> [5,]    2    2 #> [6,]    3    2 #> [7,]    1    3 #>  #> [[1]]$value #> , , 1 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    4    7   10   13   16   19 #> [2,]    2    5    8   11   14   17   20 #> [3,]    3    6    9   12   15   18   21 #>  #>  #>  #> [[2]] #> [[2]]$index #>      [,1] [,2] #> [1,]    2    3 #> [2,]    3    3 #>  #> [[2]]$value #> , , 1 #>  #>      [,1] [,2] #> [1,]   22   25 #> [2,]   23   26 #> [3,]   24   27 #>  #>  #>"},{"path":"https://crowding.github.io/iterors/reference/i_keep.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that filters elements not satisfying a predicate function — i_keep","title":"Iterator that filters elements not satisfying a predicate function — i_keep","text":"i_keep(iterable, predicate) constructs iterator filters elements iterable returning predicate TRUE.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_keep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that filters elements not satisfying a predicate function — i_keep","text":"","code":"i_keep(iterable, predicate, ...)  i_drop(iterable, predicate, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_keep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that filters elements not satisfying a predicate function — i_keep","text":"iterable iterable object. predicate function determines whether element TRUE FALSE. function assumed take one argument. ... passed along iteror constructor.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_keep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that filters elements not satisfying a predicate function — i_keep","text":"iterator object","code":""},{"path":"https://crowding.github.io/iterors/reference/i_keep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator that filters elements not satisfying a predicate function — i_keep","text":"Originally called 'ifilter' package itertools. Renamed order arguments changed put iterable first argument, better used |> operator.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/i_keep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that filters elements not satisfying a predicate function — i_keep","text":"","code":"# Filters out odd numbers and retains only even numbers is_even <- function(x) {   x %% 2 == 0 } it <- i_keep(1:10, is_even) as.list(it) #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 6 #>  #> [[4]] #> [1] 8 #>  #> [[5]] #> [1] 10 #>   # Similar idea here but anonymous function is used to retain only odd # numbers it2 <- i_drop(1:10, function(x) x %% 2 == 0) nextOr(it2, NA) # 1 #> [1] 1 nextOr(it2, NA) # 3 #> [1] 3 nextOr(it2, NA) # 5 #> [1] 5 nextOr(it2, NA) # 7 #> [1] 7 nextOr(it2, NA) # 9 #> [1] 9  is_vowel <- function(x) {   x %in% c('a', 'e', 'i', 'o', 'u') } it3 <- i_keep(letters, is_vowel) as.list(it3) #> [[1]] #> [1] \"a\" #>  #> [[2]] #> [1] \"e\" #>  #> [[3]] #> [1] \"i\" #>  #> [[4]] #> [1] \"o\" #>  #> [[5]] #> [1] \"u\" #>  # Filters out even numbers and retains only odd numbers is_even <- function(x) {   x %% 2 == 0 } it <- i_drop(1:10, is_even) as.list(it) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> [1] 5 #>  #> [[4]] #> [1] 7 #>  #> [[5]] #> [1] 9 #>   # Similar idea here but anonymous function is used to filter out odd # numbers it2 <- i_drop(1:10, function(x) x %% 2 == 1) as.list(it2) #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 6 #>  #> [[4]] #> [1] 8 #>  #> [[5]] #> [1] 10 #>   is_vowel <- function(x) {   x %in% c('a', 'e', 'i', 'o', 'u') } it3 <- i_drop(letters, is_vowel) nextOr(it3, NA) # b #> [1] \"b\" nextOr(it3, NA) # c #> [1] \"c\" nextOr(it3, NA) # d #> [1] \"d\" nextOr(it3, NA) # f #> [1] \"f\" nextOr(it3, NA) # g #> [1] \"g\" # nextOr(it, NA) continues through the rest of the consonants"},{"path":"https://crowding.github.io/iterors/reference/i_keepwhile.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that returns elements while a predicate function returns TRUE — i_keepwhile","title":"Iterator that returns elements while a predicate function returns TRUE — i_keepwhile","text":"Constructs iterator returns elements iterable object long given predicate function returns TRUE.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_keepwhile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that returns elements while a predicate function returns TRUE — i_keepwhile","text":"","code":"i_keepwhile(object, predicate, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_keepwhile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that returns elements while a predicate function returns TRUE — i_keepwhile","text":"object iterable object predicate function determines whether element TRUE FALSE. function assumed take one argument. ... passed along iteror(object, ...)","code":""},{"path":"https://crowding.github.io/iterors/reference/i_keepwhile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that returns elements while a predicate function returns TRUE — i_keepwhile","text":"iterator object","code":""},{"path":"https://crowding.github.io/iterors/reference/i_keepwhile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that returns elements while a predicate function returns TRUE — i_keepwhile","text":"","code":"# Filters out numbers exceeding 5 not_too_large <- function(x) {   x <= 5 } it <- i_keepwhile(1:100, not_too_large) unlist(as.list(it)) == 1:5 #> [1] TRUE TRUE TRUE TRUE TRUE  # Same approach but uses an anonymous function it2 <- i_keepwhile(seq(2, 100, by=2), function(x) x <= 10) unlist(as.list(it2)) == c(2, 4, 6, 8, 10) #> [1] TRUE TRUE TRUE TRUE TRUE"},{"path":"https://crowding.github.io/iterors/reference/i_limit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a limited iterator — i_limit","title":"Create a limited iterator — i_limit","text":"Create iterator wraps specified iterable limited number times.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a limited iterator — i_limit","text":"","code":"i_limit(iterable, n, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_limit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a limited iterator — i_limit","text":"iterable Iterable iterate . n Maximum number values return. ... Extra arguments iteror(iterable, ...)","code":""},{"path":"https://crowding.github.io/iterors/reference/i_limit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a limited iterator — i_limit","text":"Originally itertools package.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_limit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a limited iterator — i_limit","text":"","code":"# Limit icount to only return three values as.list(i_limit(icount(), 3)) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>"},{"path":"https://crowding.github.io/iterors/reference/i_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that applies a given function to several iterables concurrently. — i_map","title":"Iterator that applies a given function to several iterables concurrently. — i_map","text":"Constructs iterator computes given function f using arguments iterables given ....","code":""},{"path":"https://crowding.github.io/iterors/reference/i_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that applies a given function to several iterables concurrently. — i_map","text":"","code":"i_map(f, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that applies a given function to several iterables concurrently. — i_map","text":"f function ... multiple arguments iterate sequence","code":""},{"path":"https://crowding.github.io/iterors/reference/i_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that applies a given function to several iterables concurrently. — i_map","text":"iterator returns values object along index object.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator that applies a given function to several iterables concurrently. — i_map","text":"iterator returned exhausted shortest iterable ... exhausted. Note i_map recycle arguments Map . primary difference i_starmap i_map former expects iterable object whose elements already grouped together, latter case groups arguments together applying given function. choice matter style convenience.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that applies a given function to several iterables concurrently. — i_map","text":"","code":"pow <- function(x, y) {   x^y } it <- i_map(pow, c(2, 3, 10), c(5, 2, 3)) as.list(it) #> [[1]] #> [1] 32 #>  #> [[2]] #> [1] 9 #>  #> [[3]] #> [1] 1000 #>   # Similar to the above, but because the second vector is exhausted after two # calls to `nextElem`, the iterator is exhausted. it2 <- i_map(pow, c(2, 3, 10), c(5, 2)) as.list(it2) #> [[1]] #> [1] 32 #>  #> [[2]] #> [1] 9 #>   # Another similar example but with lists instead of vectors it3 <- i_map(pow, list(2, 3, 10), list(5, 2, 3)) nextOr(it3, NA) # 32 #> [1] 32 nextOr(it3, NA) # 9 #> [1] 9 nextOr(it3, NA) # 1000 #> [1] 1000"},{"path":"https://crowding.github.io/iterors/reference/i_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that filters elements where corresponding selector is false. — i_mask","title":"Iterator that filters elements where corresponding selector is false. — i_mask","text":"Constructs iterator filters elements iterable returning corresponding element selectors TRUE.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that filters elements where corresponding selector is false. — i_mask","text":"","code":"i_mask(object, selectors)"},{"path":"https://crowding.github.io/iterors/reference/i_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that filters elements where corresponding selector is false. — i_mask","text":"object iterable object selectors iterable determines whether corresponding element object returned.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that filters elements where corresponding selector is false. — i_mask","text":"iterator object","code":""},{"path":"https://crowding.github.io/iterors/reference/i_mask.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator that filters elements where corresponding selector is false. — i_mask","text":"iterator stops either object selectors exhausted.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that filters elements where corresponding selector is false. — i_mask","text":"","code":"# Filters out odd numbers and retains only even numbers n <- 10 selectors <- rep(c(FALSE, TRUE), n) it <- i_mask(seq_len(n), selectors) as.list(it) #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 6 #>  #> [[4]] #> [1] 8 #>  #> [[5]] #> [1] 10 #>   # Similar idea here but anonymous function is used to filter out even # numbers n <- 10 it2 <- i_mask(seq_len(10), rep(c(TRUE, FALSE), n)) as.list(it2) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> [1] 5 #>  #> [[4]] #> [1] 7 #>  #> [[5]] #> [1] 9 #>   it3 <- i_mask(letters, letters %in% c('a', 'e', 'i', 'o', 'u')) as.list(it3) #> [[1]] #> [1] \"a\" #>  #> [[2]] #> [1] \"e\" #>  #> [[3]] #> [1] \"i\" #>  #> [[4]] #> [1] \"o\" #>  #> [[5]] #> [1] \"u\" #>"},{"path":"https://crowding.github.io/iterors/reference/i_pad.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that returns an object followed indefinitely by a fill value — i_pad","title":"Iterator that returns an object followed indefinitely by a fill value — i_pad","text":"Constructs iterator returns iterable object padding iterator given fill value indefinitely.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_pad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that returns an object followed indefinitely by a fill value — i_pad","text":"","code":"i_pad(object, fill = NA, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_pad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that returns an object followed indefinitely by a fill value — i_pad","text":"object iterable object fill value pad indefinite iterator initial object consumed. Default: NA ... Passed along iteror constructor.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_pad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that returns an object followed indefinitely by a fill value — i_pad","text":"iterator returns object followed indefinitely fill value","code":""},{"path":"https://crowding.github.io/iterors/reference/i_pad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that returns an object followed indefinitely by a fill value — i_pad","text":"","code":"it <- iteror(1:9) it_i_pad <- i_pad(it) as.list(i_slice(it_i_pad, end=9)) # Same as as.list(1:9) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 4 #>  #> [[5]] #> [1] 5 #>  #> [[6]] #> [1] 6 #>  #> [[7]] #> [1] 7 #>  #> [[8]] #> [1] 8 #>  #> [[9]] #> [1] 9 #>   it2 <- iteror(1:9) it2_i_pad <- i_pad(it2) as.list(i_slice(it2_i_pad, end=10)) # Same as as.list(c(1:9, NA)) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 4 #>  #> [[5]] #> [1] 5 #>  #> [[6]] #> [1] 6 #>  #> [[7]] #> [1] 7 #>  #> [[8]] #> [1] 8 #>  #> [[9]] #> [1] 9 #>  #> [[10]] #> [1] NA #>   it3 <- iteror(1:9) it3_i_pad <- i_pad(it3, fill=TRUE) as.list(i_slice(it3_i_pad, end=10)) # Same as as.list(c(1:9, TRUE)) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 4 #>  #> [[5]] #> [1] 5 #>  #> [[6]] #> [1] 6 #>  #> [[7]] #> [1] 7 #>  #> [[8]] #> [1] 8 #>  #> [[9]] #> [1] 9 #>  #> [[10]] #> [1] TRUE #>"},{"path":"https://crowding.github.io/iterors/reference/i_recycle.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recycling iterator — i_recycle","title":"Create a recycling iterator — i_recycle","text":"Create iterator recycles specified iterable. first repeat iterable buffered memory finishes, repeat sequence values.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_recycle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recycling iterator — i_recycle","text":"","code":"i_recycle(iterable, times = NA_integer_, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_recycle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recycling iterator — i_recycle","text":"iterable iterable recycle. times integer.  Number times recycle values ... arguments passed iterator.  Default value NA_integer_ means recycle forever.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_recycle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a recycling iterator — i_recycle","text":"Originally itertools package.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_recycle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a recycling iterator — i_recycle","text":"","code":"# Recycle over 'a', 'b', and 'c' three times i <- i_recycle(letters[1:3], 3) as.character(i) #> [1] \"a\" \"b\" \"c\" \"a\" \"b\" \"c\" \"a\" \"b\" \"c\"  it <- i_recycle(1:3) nextOr(it, NA) # 1 #> [1] 1 nextOr(it, NA) # 2 #> [1] 2 nextOr(it, NA) # 3 #> [1] 3 nextOr(it, NA) # 1 #> [1] 1 nextOr(it, NA) # 2 #> [1] 2 nextOr(it, NA) # 3 #> [1] 3 nextOr(it, NA) # 1 #> [1] 1  it2 <- i_recycle(1:3, times=2) as.list(it2) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 1 #>  #> [[5]] #> [1] 2 #>  #> [[6]] #> [1] 3 #>   # Can return the results from a function. it3 <- iteror(function() rnorm(1), count=Inf) nextOr(it, NA) #> [1] 2 nextOr(it, NA) #> [1] 3 nextOr(it, NA) #> [1] 1 nextOr(it, NA) #> [1] 2"},{"path":"https://crowding.github.io/iterors/reference/i_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a repeating iterator — i_rep","title":"Create a repeating iterator — i_rep","text":"Create iterator version rep function.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a repeating iterator — i_rep","text":"","code":"i_rep(iterable, times = NULL, length.out = NULL, each = NULL, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a repeating iterator — i_rep","text":"iterable iterable iterate repeatedly. times vector giving number times repeat element length greater one, repeat elements length one.  behavior less strict rep since length iterable generally known. length.non-negative integer.  desired length output iterator. non-negative integer.  element iterable repeated times. ... passed along iteror(iterable, ...)","code":""},{"path":"https://crowding.github.io/iterors/reference/i_rep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a repeating iterator — i_rep","text":"Originally itertools package.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/i_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a repeating iterator — i_rep","text":"","code":"unlist(as.list(i_rep(1:4, 2))) #> [1] 1 2 3 4 1 2 3 4 unlist(as.list(i_rep(1:4, each=2))) #> [1] 1 1 2 2 3 3 4 4 unlist(as.list(i_rep(1:4, c(2,2,2,2)))) #> [1] 1 1 2 2 3 3 4 4 unlist(as.list(i_rep(1:4, c(2,1,2,1)))) #> [1] 1 1 2 3 3 4 unlist(as.list(i_rep(1:4, each=2, len=4))) #> [1] 1 1 2 2 unlist(as.list(i_rep(1:4, each=2, len=10))) #>  [1] 1 1 2 2 3 3 4 4 1 1 unlist(as.list(i_rep(1:4, each=2, times=3))) #>  [1] 1 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4"},{"path":"https://crowding.github.io/iterors/reference/i_repeat.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a repeating iterator — i_repeat","title":"Create a repeating iterator — i_repeat","text":"Create iterator returns value specified number times.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_repeat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a repeating iterator — i_repeat","text":"","code":"i_repeat(x, times)"},{"path":"https://crowding.github.io/iterors/reference/i_repeat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a repeating iterator — i_repeat","text":"x value return repeatedly. times number times repeat value.  Default value infinity.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_repeat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a repeating iterator — i_repeat","text":"Originally itertools package.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_repeat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a repeating iterator — i_repeat","text":"","code":"# Repeat a value 10 times unlist(as.list(i_repeat(42, 10))) #>  [1] 42 42 42 42 42 42 42 42 42 42"},{"path":"https://crowding.github.io/iterors/reference/i_rle.html","id":null,"dir":"Reference","previous_headings":"","what":"Run-length encoding iterator. — i_rle","title":"Run-length encoding iterator. — i_rle","text":"iterator equivalent rle; produces one output value run identical values input, along lenght run. i_rle_inverse() performs inverse transformstion.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_rle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run-length encoding iterator. — i_rle","text":"","code":"i_rle(obj, cmp = identical, ...)  i_rleinv(obj, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_rle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run-length encoding iterator. — i_rle","text":"obj iterable cmp function use comparison. take two arguments return TRUE FALSE. ... arguments forwarded iteror(obj, ...).","code":""},{"path":"https://crowding.github.io/iterors/reference/i_rle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run-length encoding iterator. — i_rle","text":"iterator returning entries form list(length=n, value=X). i_rleinv recreates original data output i_rle.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/i_rle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run-length encoding iterator. — i_rle","text":"Peter Meilstrup","code":""},{"path":"https://crowding.github.io/iterors/reference/i_rle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run-length encoding iterator. — i_rle","text":"","code":"it <- isample(c(TRUE, FALSE), 1, replace=TRUE) rle <- i_rle(it) x <- take(rle, 10) as.logical(i_rleinv(x)) #>  [1]  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE #> [13]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE"},{"path":"https://crowding.github.io/iterors/reference/i_roundrobin.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteror that traverses each given iterable in a roundrobin order — i_roundrobin","title":"Iteror that traverses each given iterable in a roundrobin order — i_roundrobin","text":"Constructs iterator traverses given iterable roundrobin order. , iterables traversed alternating fashion element drawn next iterable. iterable available elements, skipped, next element taken next iterable available elements.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_roundrobin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteror that traverses each given iterable in a roundrobin order — i_roundrobin","text":"","code":"i_roundrobin(...)"},{"path":"https://crowding.github.io/iterors/reference/i_roundrobin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteror that traverses each given iterable in a roundrobin order — i_roundrobin","text":"... multiple arguments iterate roundrobin sequence","code":""},{"path":"https://crowding.github.io/iterors/reference/i_roundrobin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteror that traverses each given iterable in a roundrobin order — i_roundrobin","text":"iterator alternates argument roundrobin sequence","code":""},{"path":"https://crowding.github.io/iterors/reference/i_roundrobin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteror that traverses each given iterable in a roundrobin order — i_roundrobin","text":"","code":"it <- iteror(c(\"A\", \"B\", \"C\")) it2 <- iteror(\"D\") it3 <- iteror(c(\"E\", \"F\")) as.list(i_roundrobin(it, it2, it3)) # A D E B F C #> [[1]] #> [1] \"A\" #>  #> [[2]] #> [1] \"D\" #>  #> [[3]] #> [1] \"E\" #>  #> [[4]] #> [1] \"B\" #>  #> [[5]] #> [1] \"F\" #>  #> [[6]] #> [1] \"C\" #>   it_rr <- i_roundrobin(1:3, 4:5, 7:10) as.list(it_rr) # 1 4 7 2 5 8 3 9 10 #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 7 #>  #> [[4]] #> [1] 2 #>  #> [[5]] #> [1] 5 #>  #> [[6]] #> [1] 8 #>  #> [[7]] #> [1] 3 #>  #> [[8]] #> [1] 9 #>  #> [[9]] #> [1] 10 #>"},{"path":"https://crowding.github.io/iterors/reference/i_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteror that returns selected elements from an iterable. — i_slice","title":"Iteror that returns selected elements from an iterable. — i_slice","text":"Constructs iteror returns elements iterable following given sequence starting value start ending value end. sequence's step size given step.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteror that returns selected elements from an iterable. — i_slice","text":"","code":"i_slice(object, start = 1, end = NULL, step = 1, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteror that returns selected elements from an iterable. — i_slice","text":"object iterable object function iterates start index first element return object end index last element return object step step size sequence ... passed along iteror(object, ...)","code":""},{"path":"https://crowding.github.io/iterors/reference/i_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteror that returns selected elements from an iterable. — i_slice","text":"iteror returns object sequence","code":""},{"path":"https://crowding.github.io/iterors/reference/i_slice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iteror that returns selected elements from an iterable. — i_slice","text":"iterable given object traversed beginning element index specified start. start greater 1, elements object skipped start reached. default, elements returned consecutively. However, step size greater 1, elements object skipped. stop Inf (default), iteration continues iteror exhausted unless end specified. case, end specifies sequence position stop iteration. Originally package itertools2.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteror that returns selected elements from an iterable. — i_slice","text":"","code":"it <- i_slice(1:5, start=2) nextOr(it, NULL) # 2 #> [1] 2 nextOr(it, NULL) # 3 #> [1] 3 nextOr(it, NULL) # 4 #> [1] 4 nextOr(it, NULL) # 5 #> [1] 5  it2 <- i_slice(1:10, start=2, end=5) unlist(as.list(it2)) == 2:5 #> [1] TRUE TRUE TRUE TRUE  it3 <- i_slice(1:10, start=2, end=9, step=2) unlist(as.list(it3)) == c(2, 4, 6, 8) #> [1] TRUE TRUE TRUE TRUE"},{"path":"https://crowding.github.io/iterors/reference/i_starmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteror that applies a given function to the elements of an iterable. — i_starmap","title":"Iteror that applies a given function to the elements of an iterable. — i_starmap","text":"Constructs iteror applies function f concurrently elements within list x.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_starmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteror that applies a given function to the elements of an iterable. — i_starmap","text":"","code":"i_starmap(f, x)  i_star(f, x)"},{"path":"https://crowding.github.io/iterors/reference/i_starmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteror that applies a given function to the elements of an iterable. — i_starmap","text":"f function apply elements x x iterable object","code":""},{"path":"https://crowding.github.io/iterors/reference/i_starmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteror that applies a given function to the elements of an iterable. — i_starmap","text":"iterator returns values object along index object.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_starmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iteror that applies a given function to the elements of an iterable. — i_starmap","text":"iteror returned exhausted shortest element x exhausted. Note i_starmap recycle arguments Map . primary difference i_starmap i_map former expects iterable object whose elements already grouped together, latter case groups arguments together applying given function. choice matter style convenience.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_starmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteror that applies a given function to the elements of an iterable. — i_starmap","text":"","code":"pow <- function(x, y) {   x^y } it <- i_starmap(pow, list(c(2, 3, 10), c(5, 2, 3))) unlist(as.list(it)) == c(32, 9, 1000) #> [1] TRUE TRUE TRUE  # Similar to the above, but because the second vector is exhausted after two # calls to `nextElem`, the iterator is exhausted. it2 <- i_starmap(pow, list(c(2, 3, 10), c(5, 2))) unlist(as.list(it2)) == c(32, 9) #> [1] TRUE TRUE  # Another similar example but with lists instead of vectors it3 <- i_starmap(pow, list(list(2, 3, 10), list(5, 2, 3))) as.list(it3) #> [[1]] #> [1] 32 #>  #> [[2]] #> [1] 9 #>  #> [[3]] #> [1] 1000 #>   # Computes sum of each row in the iris data set # Numerically equivalent to base::rowSums() tolerance <- sqrt(.Machine$double.eps) iris_x <- iris[, -5] it4 <- i_starmap(sum, iris_x) unlist(as.list(it4)) - rowSums(iris_x) < tolerance #>   [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>  [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>  [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>  [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>  [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>  [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>  [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [106] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [121] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [136] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"https://crowding.github.io/iterors/reference/i_tee.html","id":null,"dir":"Reference","previous_headings":"","what":"Create multiple iterators from one source — i_tee","title":"Create multiple iterators from one source — i_tee","text":"i_tee(obj, n) consumes buffers output single iterator obj can read n independent sub-iterators.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_tee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create multiple iterators from one source — i_tee","text":"","code":"i_tee(obj, n, max = 2^16 - 1, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_tee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create multiple iterators from one source — i_tee","text":"obj iterable object n number iterators return max maximum number values buffer. ... passed along iteror(obj, ...)","code":""},{"path":"https://crowding.github.io/iterors/reference/i_tee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create multiple iterators from one source — i_tee","text":"list n iterators.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_tee.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create multiple iterators from one source — i_tee","text":"works saving output source obj queue, sub-iterator \"read pointer\" indexing queue. Items dropped queue sub-iterators seen . means one sub-iterator falls far behind others, equivalently one sub-iterator reads far ahead cohort others, intervening values kept memory. max argument gives limit many items held. limit exceeded due one sub-iterator reading far ahead others, error thrown sub-iterator attempts read new value.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_tee.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create multiple iterators from one source — i_tee","text":"Peter Meilstrup","code":""},{"path":"https://crowding.github.io/iterors/reference/i_timeout.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a timeout iterator — i_timeout","title":"Create a timeout iterator — i_timeout","text":"Create iterator iterates another iterator specified period time, stops.  can useful want search something, run test awhile, stop.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_timeout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a timeout iterator — i_timeout","text":"","code":"i_timeout(iterable, time, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_timeout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a timeout iterator — i_timeout","text":"iterable Iterable iterate . time time interval iterate , seconds. ... passed along iteror(iterable, ...)","code":""},{"path":"https://crowding.github.io/iterors/reference/i_timeout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a timeout iterator — i_timeout","text":"Originally itertools package.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_timeout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a timeout iterator — i_timeout","text":"","code":"# See how high we can count in a tenth of a second length(as.list(i_timeout(icount(), 0.1))) #> [1] 15817"},{"path":"https://crowding.github.io/iterors/reference/i_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that extracts the unique elements from an iterable object — i_unique","title":"Iterator that extracts the unique elements from an iterable object — i_unique","text":"Constructs iterator extracts unique element turn iterable object. Order elements maintained. function iterator analogue unique.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that extracts the unique elements from an iterable object — i_unique","text":"","code":"i_unique(object, digest = rlang::hash, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that extracts the unique elements from an iterable object — i_unique","text":"object iterable object digest Optionally specify custom hash function (e.g. digest::digest, rlang::hash). function returning character value. ... Extra arguments forwarded iteror.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that extracts the unique elements from an iterable object — i_unique","text":"iterator returns unique elements object","code":""},{"path":"https://crowding.github.io/iterors/reference/i_unique.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator that extracts the unique elements from an iterable object — i_unique","text":"NOTE: order determine whether element unique, list previous unique elements stored. , list can potentially become large large number unique elements.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/i_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that extracts the unique elements from an iterable object — i_unique","text":"","code":"it <- i_chain(rep(1, 4), rep(2, 5), 4:7, 2) as.list(i_unique(it)) # 1 2 4 5 6 7 #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 4 #>  #> [[4]] #> [1] 5 #>  #> [[5]] #> [1] 6 #>  #> [[6]] #> [1] 7 #>   it2 <- iterators::iter(c('a', 'a', \"A\", \"V\")) as.list(i_unique(it2)) # a A V #> [[1]] #> [1] \"a\" #>  #> [[2]] #> [1] \"A\" #>  #> [[3]] #> [1] \"V\" #>   x <- as.character(gl(5, 10)) it_unique <- i_unique(x) as.list(it_unique) # 1 2 3 4 5 #> [[1]] #> [1] \"1\" #>  #> [[2]] #> [1] \"2\" #>  #> [[3]] #> [1] \"3\" #>  #> [[4]] #> [1] \"4\" #>  #> [[5]] #> [1] \"5\" #>"},{"path":"https://crowding.github.io/iterors/reference/i_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a sliding window over an iterator — i_window","title":"Construct a sliding window over an iterator — i_window","text":"element returned i_window(obj) consists n consecutive elements underlying obj, window advancing forward one element iteration.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a sliding window over an iterator — i_window","text":"","code":"i_window(obj, n, tail, ...)"},{"path":"https://crowding.github.io/iterors/reference/i_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a sliding window over an iterator — i_window","text":"obj iterable. n width window apply tail value given, tails included beginning end iteration, filled given value. ... passed along iteror(object, ...)","code":""},{"path":"https://crowding.github.io/iterors/reference/i_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a sliding window over an iterator — i_window","text":"iteror.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_window.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct a sliding window over an iterator — i_window","text":"Peter Meilstrup","code":""},{"path":"https://crowding.github.io/iterors/reference/i_window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a sliding window over an iterator — i_window","text":"","code":"#' @examples it <- i_window(iteror(letters[1:4]), 2) nextOr(it, NA) # list(\"a\", \"b\") #> [[1]] #> [1] \"a\" #>  #> [[2]] #> [1] \"b\" #>  nextOr(it, NA) # list(\"b\", \"c\") #> [[1]] #> [1] \"b\" #>  #> [[2]] #> [1] \"c\" #>  nextOr(it, NA) # list(\"c\", \"d\") #> [[1]] #> [1] \"c\" #>  #> [[2]] #> [1] \"d\" #>   it2 <- i_window(icount(5), 2) nextOr(it2, NA) # list(1, 2) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  nextOr(it2, NA) # list(2, 3) #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 3 #>  nextOr(it2, NA) # list(3, 4) #> [[1]] #> [1] 3 #>  #> [[2]] #> [1] 4 #>  nextOr(it2, NA) # list(4, 5) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] 5 #>   it <- i_window(letters[1:4], 2) nextOr(it, NA) # list(\"a\", \"b\") #> [[1]] #> [1] \"a\" #>  #> [[2]] #> [1] \"b\" #>  nextOr(it, NA) # list(\"b\", \"c\") #> [[1]] #> [1] \"b\" #>  #> [[2]] #> [1] \"c\" #>  nextOr(it, NA) # list(\"c\", \"d\") #> [[1]] #> [1] \"c\" #>  #> [[2]] #> [1] \"d\" #>   it <- i_window(letters[1:4], 3) nextOr(it) # list(\"a\", \"b\", \"c\") #> [[1]] #> [1] \"a\" #>  #> [[2]] #> [1] \"b\" #>  #> [[3]] #> [1] \"c\" #>  nextOr(it) # list(\"b\", \"c\", \"d\") #> [[1]] #> [1] \"b\" #>  #> [[2]] #> [1] \"c\" #>  #> [[3]] #> [1] \"d\" #>   it <- i_window(letters[1:4], 3, tail=\" \") nextOr(it) # list(\" \", \" \", \"a\") #> [[1]] #> [1] \" \" #>  #> [[2]] #> [1] \" \" #>  #> [[3]] #> [1] \"a\" #>  nextOr(it) # list(\" \", \"a\", \"b\") #> [[1]] #> [1] \" \" #>  #> [[2]] #> [1] \"a\" #>  #> [[3]] #> [1] \"b\" #>  nextOr(it) # list(\"a\", \"b\", \"c\") #> [[1]] #> [1] \"a\" #>  #> [[2]] #> [1] \"b\" #>  #> [[3]] #> [1] \"c\" #>  nextOr(it) # list(\"b\", \"c\", \"d\") #> [[1]] #> [1] \"b\" #>  #> [[2]] #> [1] \"c\" #>  #> [[3]] #> [1] \"d\" #>  nextOr(it) # list(\"c\", \"d\", \" \") #> [[1]] #> [1] \"c\" #>  #> [[2]] #> [1] \"d\" #>  #> [[3]] #> [1] \" \" #>  nextOr(it) # list(\"d\", \" \", \" \") #> [[1]] #> [1] \"d\" #>  #> [[2]] #> [1] \" \" #>  #> [[3]] #> [1] \" \" #>"},{"path":"https://crowding.github.io/iterors/reference/i_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine several iterables in parallel. — i_zip","title":"Combine several iterables in parallel. — i_zip","text":"resulting iterator aggregates one element iterables list iteration. Used lock-step iteration several iterables time.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine several iterables in parallel. — i_zip","text":"","code":"i_zip(...)  i_zip_longest(..., fill = NA)"},{"path":"https://crowding.github.io/iterors/reference/i_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine several iterables in parallel. — i_zip","text":"... multiple arguments iterate parallel fill value used replace missing values iterables ... uneven length","code":""},{"path":"https://crowding.github.io/iterors/reference/i_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine several iterables in parallel. — i_zip","text":"iterator iterates argument sequence","code":""},{"path":"https://crowding.github.io/iterors/reference/i_zip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine several iterables in parallel. — i_zip","text":"[i_zip], output finish underlying iterables finish. Originally itertools package. Originally package itertools2.","code":""},{"path":"https://crowding.github.io/iterors/reference/i_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine several iterables in parallel. — i_zip","text":"","code":"# Iterate over two iterables of different sizes as.list(i_zip(a=1:2, b=letters[1:3])) #> [[1]] #> [[1]]$a #> [1] 1 #>  #> [[1]]$b #> [1] \"a\" #>  #>  #> [[2]] #> [[2]]$a #> [1] 2 #>  #> [[2]]$b #> [1] \"b\" #>  #>   it <- i_zip_longest(x=1:3, y=4:6, z=7:9) nextOr(it, NA) # list(x=1, y=4, z=7) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 7 #>  nextOr(it, NA) # list(x=2, y=5, z=8) #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 5 #>  #> [[3]] #> [1] 8 #>  nextOr(it, NA) # list(x=3, y=6, z=9) #> [[1]] #> [1] 3 #>  #> [[2]] #> [1] 6 #>  #> [[3]] #> [1] 9 #>   it2 <- i_zip_longest(1:3, 4:8) nextOr(it2, NA) # list(1, 4) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 4 #>  nextOr(it2, NA) # list(2, 5) #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 5 #>  nextOr(it2, NA) # list(3, 6) #> [[1]] #> [1] 3 #>  #> [[2]] #> [1] 6 #>  nextOr(it2, NA) # list(NA, 7) #> [[1]] #> [1] NA #>  #> [[2]] #> [1] 7 #>  nextOr(it2, NA) # list(NA, 8) #> [[1]] #> [1] NA #>  #> [[2]] #> [1] 8 #>   it3 <- i_zip_longest(1:2, 4:7, levels(iris$Species), fill=\"w00t\") nextOr(it3, NA) # list(1, 4, \"setosa\") #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] \"setosa\" #>  nextOr(it3, NA) # list(2, 5, \"versicolor\") #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 5 #>  #> [[3]] #> [1] \"versicolor\" #>  nextOr(it3, NA) # list(\"w00t\", 6, \"virginica\") #> [[1]] #> [1] \"w00t\" #>  #> [[2]] #> [1] 6 #>  #> [[3]] #> [1] \"virginica\" #>  nextOr(it3, NA) # list(\"w00t\", 7, \"w00t\") #> [[1]] #> [1] \"w00t\" #>  #> [[2]] #> [1] 7 #>  #> [[3]] #> [1] \"w00t\" #>"},{"path":"https://crowding.github.io/iterors/reference/icombinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that generates all combinations of a vector taken m at a time. — icombinations","title":"Iterator that generates all combinations of a vector taken m at a time. — icombinations","text":"Constructs iterator generates combinations vector taken m time. function similar combn.","code":""},{"path":"https://crowding.github.io/iterors/reference/icombinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that generates all combinations of a vector taken m at a time. — icombinations","text":"","code":"icombinations(object, m, replacement = FALSE)"},{"path":"https://crowding.github.io/iterors/reference/icombinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that generates all combinations of a vector taken m at a time. — icombinations","text":"object vector m length combination replacement Generate combinations replacement? Default: .","code":""},{"path":"https://crowding.github.io/iterors/reference/icombinations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that generates all combinations of a vector taken m at a time. — icombinations","text":"iterator generates combinations object","code":""},{"path":"https://crowding.github.io/iterors/reference/icombinations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator that generates all combinations of a vector taken m at a time. — icombinations","text":"default, combinations without replacement elements repeated. generate combinations replacement, set replacement=TRUE. function implementation loosely based combinations function Python's itertools. Combinations replacement based combinations_with_replacement Python library.","code":""},{"path":"https://crowding.github.io/iterors/reference/icombinations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that generates all combinations of a vector taken m at a time. — icombinations","text":"","code":"# Combinations without replacement it <- icombinations(1:4, m=2)  nextOr(it, NA) # c(1, 2) #> [1] 1 2 nextOr(it, NA) # c(1, 3) #> [1] 1 3 nextOr(it, NA) # c(1, 4) #> [1] 1 4 nextOr(it, NA) # c(2, 3) #> [1] 2 3 nextOr(it, NA) # c(2, 4) #> [1] 2 4 nextOr(it, NA) # c(3, 4) #> [1] 3 4  # Combinations without replacement it <- icombinations(1:4, m=2, replacement=TRUE)  nextOr(it, NA) # c(1, 1) #> [1] 1 1 nextOr(it, NA) # c(1, 2) #> [1] 1 2 nextOr(it, NA) # c(1, 3) #> [1] 1 3 nextOr(it, NA) # c(1, 4) #> [1] 1 4 nextOr(it, NA) # c(2, 2) #> [1] 2 2 nextOr(it, NA) # c(2, 3) #> [1] 2 3 nextOr(it, NA) # c(2, 4) #> [1] 2 4 nextOr(it, NA) # c(3, 3) #> [1] 3 3 nextOr(it, NA) # c(3, 4) #> [1] 3 4 nextOr(it, NA) # c(4, 4) #> [1] 4 4  it3 <- icombinations(1:5, m=2) as.list(it3) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 1 3 #>  #> [[3]] #> [1] 1 4 #>  #> [[4]] #> [1] 1 5 #>  #> [[5]] #> [1] 2 3 #>  #> [[6]] #> [1] 2 4 #>  #> [[7]] #> [1] 2 5 #>  #> [[8]] #> [1] 3 4 #>  #> [[9]] #> [1] 3 5 #>  #> [[10]] #> [1] 4 5 #>  utils::combn(x=1:5, m=2, simplify=FALSE) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 1 3 #>  #> [[3]] #> [1] 1 4 #>  #> [[4]] #> [1] 1 5 #>  #> [[5]] #> [1] 2 3 #>  #> [[6]] #> [1] 2 4 #>  #> [[7]] #> [1] 2 5 #>  #> [[8]] #> [1] 3 4 #>  #> [[9]] #> [1] 3 5 #>  #> [[10]] #> [1] 4 5 #>"},{"path":"https://crowding.github.io/iterors/reference/icount.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting Iterators — icount","title":"Counting Iterators — icount","text":"Returns iterator counts starting one. icountn(vn) takes vector specifying array size, returns iterator array indices. returned element vector length vn, first index varying fastest. vn names attribute output names.","code":""},{"path":"https://crowding.github.io/iterors/reference/icount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting Iterators — icount","text":"","code":"icount(count = Inf, ..., recycle = FALSE, chunkSize, chunks)  icountn(vn, ..., recycle = FALSE, chunkSize, chunks, rowMajor = TRUE)"},{"path":"https://crowding.github.io/iterors/reference/icount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting Iterators — icount","text":"count number times iterator fire. Use NA Inf make iterator counts forever. ... Undocumented recycle Whether restart count finishing. chunkSize many valies return call nextOr(). chunks many chunks split input. Either chunks chunkSize may given . vn vector integers. rowMajor TRUE (default), earliest indices cycle fastest; FALSE, last indices cycle fastest.","code":""},{"path":"https://crowding.github.io/iterors/reference/icount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting Iterators — icount","text":"counting iterator.","code":""},{"path":"https://crowding.github.io/iterors/reference/icount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Counting Iterators — icount","text":"Originally iterators package.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/icount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting Iterators — icount","text":"","code":"# create an iterator that counts from 1 to 3. it <- icount(3) nextOr(it) #> [1] 1 nextOr(it) #> [1] 2 nextOr(it) #> [1] 3 nextOr(it, NULL)  # expect NULL #> NULL  x <- icount(5) repeat print(nextOr(x, break)) #> [1] 1 #> [1] 2 #> [1] 3 #> [1] 4 #> [1] 5  it2 <- icount(100) all.equal(as.numeric(it2), 1:100) #> [1] TRUE as.list(icountn(c(2, 3))) #> [[1]] #> [1] 1 1 #>  #> [[2]] #> [1] 2 1 #>  #> [[3]] #> [1] 1 2 #>  #> [[4]] #> [1] 2 2 #>  #> [[5]] #> [1] 1 3 #>  #> [[6]] #> [1] 2 3 #>"},{"path":"https://crowding.github.io/iterors/reference/idedup.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop duplicated items from an iterator. — idedup","title":"Drop duplicated items from an iterator. — idedup","text":"Constructs iterator removes runs repeated elements underlying iterator. Order elements maintained. element just seen remembered determining whether drop.","code":""},{"path":"https://crowding.github.io/iterors/reference/idedup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop duplicated items from an iterator. — idedup","text":"","code":"idedup(object, cmp = identical, ...)"},{"path":"https://crowding.github.io/iterors/reference/idedup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop duplicated items from an iterator. — idedup","text":"object iterable object cmp function use comparison. ... passed along iteror(object, ...)","code":""},{"path":"https://crowding.github.io/iterors/reference/idedup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop duplicated items from an iterator. — idedup","text":"iterator skips duplicate items teh unterlying iterator.","code":""},{"path":"https://crowding.github.io/iterors/reference/idedup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop duplicated items from an iterator. — idedup","text":"Originated itertools2::iunique_lastseen. object.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/idedup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop duplicated items from an iterator. — idedup","text":"","code":"it <- i_chain(rep(1,4), rep(2, 5), 4:7, 2) it_i_unique <- idedup(it) as.list(it_i_unique) # 1 2 4 5 6 7 2 #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 4 #>  #> [[4]] #> [1] 5 #>  #> [[5]] #> [1] 6 #>  #> [[6]] #> [1] 7 #>  #> [[7]] #> [1] 2 #>   it2 <- iteror(c('a', 'a', \"A\", 'a', 'a', \"V\")) i_dedupe <- idedup(it2) as.list(idedup) # a A a V #> $object #>  #>  #> $cmp #> identical #>  #> $... #>  #>  #> [[4]] #> { #>     object <- iteror(object, ...) #>     prev_elem <- NULL #>     first_seen <- FALSE #>     nextOr_ <- function(or) { #>         repeat { #>             elem <- nextOr(object, return(or)) #>             if (!first_seen || !cmp(elem, prev_elem)) { #>                 first_seen <<- TRUE #>                 prev_elem <<- elem #>                 return(elem) #>             } #>             prev_elem <<- elem #>         } #>     } #>     iteror_internal(nextOr_) #> } #>"},{"path":"https://crowding.github.io/iterors/reference/idiv.html","id":null,"dir":"Reference","previous_headings":"","what":"Dividing Iterator — idiv","title":"Dividing Iterator — idiv","text":"Returns iterator dividing value integer chunks, sum(idiv(n, ...)) == floor(n)","code":""},{"path":"https://crowding.github.io/iterors/reference/idiv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dividing Iterator — idiv","text":"","code":"idiv(count, ..., recycle = FALSE, chunkSize, chunks)"},{"path":"https://crowding.github.io/iterors/reference/idiv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dividing Iterator — idiv","text":"count total ... Unused. recycle Whether restart count finishing. chunkSize maximum size pieces n divided .  useful know size pieces want.  specified, chunks . chunks number pieces n divided . useful know number pieces want.  specified, chunkSize .","code":""},{"path":"https://crowding.github.io/iterors/reference/idiv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dividing Iterator — idiv","text":"dividing iterator.","code":""},{"path":"https://crowding.github.io/iterors/reference/idiv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dividing Iterator — idiv","text":"Originally iterators package.","code":""},{"path":"https://crowding.github.io/iterors/reference/idiv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dividing Iterator — idiv","text":"","code":"# divide the value 10 into 3 pieces it <- idiv(10, chunks = 3) nextOr(it) #> [1] 4 nextOr(it) #> [1] 3 nextOr(it) #> [1] 3 nextOr(it, NULL)  # expect NULL #> NULL  # divide the value 10 into pieces no larger than 3 it <- idiv(10, chunkSize = 3) nextOr(it) #> [1] 3 nextOr(it) #> [1] 3 nextOr(it) #> [1] 3 nextOr(it) #> [1] 1 nextOr(it, NULL)  # end of iterator #> NULL"},{"path":"https://crowding.github.io/iterors/reference/igrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that covers the Cartesian product of the arguments. — igrid","title":"Iterator that covers the Cartesian product of the arguments. — igrid","text":"Given number vectors arguments, constructs iterator enumerates Cartesian product arguments.","code":""},{"path":"https://crowding.github.io/iterors/reference/igrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that covers the Cartesian product of the arguments. — igrid","text":"","code":"igrid(   ...,   recycle = FALSE,   chunkSize,   chunks,   simplify = FALSE,   rowMajor = TRUE )"},{"path":"https://crowding.github.io/iterors/reference/igrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that covers the Cartesian product of the arguments. — igrid","text":"... Named vectors iterate . recycle TRUE, iteror starts reaching end. chunkSize Optional; many chunks divide input . chunks Optional; many rows return step. simplify TRUE, inputs coerced common data type results returned vector (matrix chunking enabled). FALSE, results returned list (data.frame chunking). rowMajor TRUE, left-indices change fastest. FALSE rightmost indices change fastest.","code":""},{"path":"https://crowding.github.io/iterors/reference/igrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that covers the Cartesian product of the arguments. — igrid","text":"iteror iterates element Cartesian product arguments.","code":""},{"path":"https://crowding.github.io/iterors/reference/igrid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator that covers the Cartesian product of the arguments. — igrid","text":"Although share end goal, igrid can yield drastic memory savings compared expand.grid.","code":""},{"path":"https://crowding.github.io/iterors/reference/igrid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that covers the Cartesian product of the arguments. — igrid","text":"","code":"# Simulate a doubly-nested loop with a single while loop it <- igrid(a=1:3, b=1:2) repeat {   x <- nextOr(it, break)   cat(sprintf('a = %d, b = %d\\n', x$a, x$b)) } #> a = 1, b = 1 #> a = 2, b = 1 #> a = 3, b = 1 #> a = 1, b = 2 #> a = 2, b = 2 #> a = 3, b = 2  it <- igrid(x=1:3, y=4:5) nextOr(it, NA) # list(x=1, y=4) #> $x #> [1] 1 #>  #> $y #> [1] 4 #>  nextOr(it, NA) # list(x=1, y=5) #> $x #> [1] 2 #>  #> $y #> [1] 4 #>  nextOr(it, NA) # list(x=2, y=4) #> $x #> [1] 3 #>  #> $y #> [1] 4 #>  nextOr(it, NA) # list(x=2, y=5) #> $x #> [1] 1 #>  #> $y #> [1] 5 #>  nextOr(it, NA) # list(x=3, y=4) #> $x #> [1] 2 #>  #> $y #> [1] 5 #>  nextOr(it, NA) # list(x=3, y=5) #> $x #> [1] 3 #>  #> $y #> [1] 5 #>   # Second Cartesian product nextOr(it, NA) # list(x=1, y=4) #> [1] NA nextOr(it, NA) # list(x=1, y=5) #> [1] NA nextOr(it, NA) # list(x=2, y=4) #> [1] NA nextOr(it, NA) # list(x=2, y=5) #> [1] NA nextOr(it, NA) # list(x=3, y=4) #> [1] NA nextOr(it, NA) # list(x=3, y=5) #> [1] NA  # igrid is an iterator equivalent to base::expand.grid() # Large data.frames are not created unless the iterator is manually consumed a <- 1:2 b <- 3:4 c <- 5:6 it3 <- igrid(a=a, b=b, c=c) df_igrid <- do.call(rbind, as.list(it3)) df_igrid <- data.frame(df_igrid)  # Compare df_igrid with the results from base::expand.grid() base::expand.grid(a=a, b=b, c=c) #>   a b c #> 1 1 3 5 #> 2 2 3 5 #> 3 1 4 5 #> 4 2 4 5 #> 5 1 3 6 #> 6 2 3 6 #> 7 1 4 6 #> 8 2 4 6"},{"path":"https://crowding.github.io/iterors/reference/ipermutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that generates all permutations of a vector. — ipermutations","title":"Iterator that generates all permutations of a vector. — ipermutations","text":"Constructs iterator generates permutations iterable object. default, full-length permutations generated. m specified, successive m length permutations instead generated.","code":""},{"path":"https://crowding.github.io/iterors/reference/ipermutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that generates all permutations of a vector. — ipermutations","text":"","code":"ipermutations(object, m = NULL)"},{"path":"https://crowding.github.io/iterors/reference/ipermutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that generates all permutations of a vector. — ipermutations","text":"object vector m length permutations. default, full-length permutations generated.","code":""},{"path":"https://crowding.github.io/iterors/reference/ipermutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that generates all permutations of a vector. — ipermutations","text":"iterator generates permutations object","code":""},{"path":"https://crowding.github.io/iterors/reference/ipermutations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator that generates all permutations of a vector. — ipermutations","text":"implementation loosely based Python's itertools.","code":""},{"path":"https://crowding.github.io/iterors/reference/ipermutations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that generates all permutations of a vector. — ipermutations","text":"","code":"it <- ipermutations(1:3)  nextOr(it, NA) # c(1, 2, 3) #> [1] 1 2 3 nextOr(it, NA) # c(1, 3, 2) #> [1] 1 3 2 nextOr(it, NA) # c(3, 1, 2) #> [1] 2 1 3 nextOr(it, NA) # c(3, 2, 1) #> [1] 2 3 1 nextOr(it, NA) # c(2, 3, 1) #> [1] 3 1 2 nextOr(it, NA) # c(2, 1, 3) #> [1] 3 2 1  it2 <- ipermutations(letters[1:4]) # 24 = 4! permutations of the letters a, b, c, and d as.list(it2) #> [[1]] #> [1] \"a\" \"b\" \"c\" \"d\" #>  #> [[2]] #> [1] \"a\" \"b\" \"d\" \"c\" #>  #> [[3]] #> [1] \"a\" \"c\" \"b\" \"d\" #>  #> [[4]] #> [1] \"a\" \"c\" \"d\" \"b\" #>  #> [[5]] #> [1] \"a\" \"d\" \"b\" \"c\" #>  #> [[6]] #> [1] \"a\" \"d\" \"c\" \"b\" #>  #> [[7]] #> [1] \"b\" \"a\" \"c\" \"d\" #>  #> [[8]] #> [1] \"b\" \"a\" \"d\" \"c\" #>  #> [[9]] #> [1] \"b\" \"c\" \"a\" \"d\" #>  #> [[10]] #> [1] \"b\" \"c\" \"d\" \"a\" #>  #> [[11]] #> [1] \"b\" \"d\" \"a\" \"c\" #>  #> [[12]] #> [1] \"b\" \"d\" \"c\" \"a\" #>  #> [[13]] #> [1] \"c\" \"a\" \"b\" \"d\" #>  #> [[14]] #> [1] \"c\" \"a\" \"d\" \"b\" #>  #> [[15]] #> [1] \"c\" \"b\" \"a\" \"d\" #>  #> [[16]] #> [1] \"c\" \"b\" \"d\" \"a\" #>  #> [[17]] #> [1] \"c\" \"d\" \"a\" \"b\" #>  #> [[18]] #> [1] \"c\" \"d\" \"b\" \"a\" #>  #> [[19]] #> [1] \"d\" \"a\" \"b\" \"c\" #>  #> [[20]] #> [1] \"d\" \"a\" \"c\" \"b\" #>  #> [[21]] #> [1] \"d\" \"b\" \"a\" \"c\" #>  #> [[22]] #> [1] \"d\" \"b\" \"c\" \"a\" #>  #> [[23]] #> [1] \"d\" \"c\" \"a\" \"b\" #>  #> [[24]] #> [1] \"d\" \"c\" \"b\" \"a\" #>"},{"path":"https://crowding.github.io/iterors/reference/iread.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator over Rows of a Data Frame Stored in a File — iread.table","title":"Iterator over Rows of a Data Frame Stored in a File — iread.table","text":"Returns iterator rows data frame stored file table format.  wrapper around standard read.table function.","code":""},{"path":"https://crowding.github.io/iterors/reference/iread.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator over Rows of a Data Frame Stored in a File — iread.table","text":"","code":"iread.table(file, ..., verbose = FALSE)"},{"path":"https://crowding.github.io/iterors/reference/iread.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator over Rows of a Data Frame Stored in a File — iread.table","text":"file name file read data . ... additional arguments passed read.table function.  See documentation read.table information. verbose logical value indicating whether print calls read.table.","code":""},{"path":"https://crowding.github.io/iterors/reference/iread.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator over Rows of a Data Frame Stored in a File — iread.table","text":"file reading iterator.","code":""},{"path":"https://crowding.github.io/iterors/reference/iread.table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator over Rows of a Data Frame Stored in a File — iread.table","text":"Originally iterators package.","code":""},{"path":"https://crowding.github.io/iterors/reference/iread.table.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Iterator over Rows of a Data Frame Stored in a File — iread.table","text":"version iread.table, read.table arguments header row.names must specified.  default values arguments depend contents beginning file.  order make subsequent calls read.table work consistently, user must specify arguments explicitly.  future version iread.table may remove requirement.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/ireadBin.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an iterator to read binary data from a connection — ireadBin","title":"Create an iterator to read binary data from a connection — ireadBin","text":"Create iterator read binary data connection.","code":""},{"path":"https://crowding.github.io/iterors/reference/ireadBin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an iterator to read binary data from a connection — ireadBin","text":"","code":"ireadBin(   con,   what = \"raw\",   n = 1L,   size = NA_integer_,   signed = TRUE,   endian = .Platform$endian,   ipos = NULL )"},{"path":"https://crowding.github.io/iterors/reference/ireadBin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an iterator to read binary data from a connection — ireadBin","text":"con connection object character string naming file raw vector. Either object whose mode give mode vector read, character vector length one describing mode: one “numeric”, “double”, “integer”, “int”, “logical”, “complex”, “character”, “raw”. Unlike readBin, default value “raw”. n integer.  (maximal) number records read time iterator called. size integer.  number bytes per element byte stream. default, ‘NA_integer_’, uses natural size. signed logical.  used integers sizes 1 2, determines quantity file regarded signed unsigned integer. endian endian-ness ('“big”' '“little”') target system file.  Using '“swap”' force swapping endian-ness. ipos iterable.  NULL, values iterable used seek file calling readBin.","code":""},{"path":"https://crowding.github.io/iterors/reference/ireadBin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an iterator to read binary data from a connection — ireadBin","text":"Originally itertools package.","code":""},{"path":"https://crowding.github.io/iterors/reference/ireadBin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an iterator to read binary data from a connection — ireadBin","text":"","code":"zz <- file(\"testbin\", \"wb\") writeBin(1:100, zz) close(zz)  it <- ihasNext(ireadBin(\"testbin\", integer(), 10)) repeat print(nextOr(it, break)) #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  [1] 11 12 13 14 15 16 17 18 19 20 #>  [1] 21 22 23 24 25 26 27 28 29 30 #>  [1] 31 32 33 34 35 36 37 38 39 40 #>  [1] 41 42 43 44 45 46 47 48 49 50 #>  [1] 51 52 53 54 55 56 57 58 59 60 #>  [1] 61 62 63 64 65 66 67 68 69 70 #>  [1] 71 72 73 74 75 76 77 78 79 80 #>  [1] 81 82 83 84 85 86 87 88 89 90 #>  [1]  91  92  93  94  95  96  97  98  99 100 unlink(\"testbin\")"},{"path":"https://crowding.github.io/iterors/reference/ireadLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator over Lines of Text from a Connection — ireadLines","title":"Iterator over Lines of Text from a Connection — ireadLines","text":"Returns iterator lines text connection.  wrapper around standard readLines function.","code":""},{"path":"https://crowding.github.io/iterors/reference/ireadLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator over Lines of Text from a Connection — ireadLines","text":"","code":"ireadLines(con, n = 1, ...)"},{"path":"https://crowding.github.io/iterors/reference/ireadLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator over Lines of Text from a Connection — ireadLines","text":"con connection object character string. n integer.  maximum number lines read.  Negative values indicate one read end connection.  default value 1. ... passed readLines function.","code":""},{"path":"https://crowding.github.io/iterors/reference/ireadLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator over Lines of Text from a Connection — ireadLines","text":"line reading iterator.","code":""},{"path":"https://crowding.github.io/iterors/reference/ireadLines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator over Lines of Text from a Connection — ireadLines","text":"Originally iterators package.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/ireadLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator over Lines of Text from a Connection — ireadLines","text":"","code":"# create an iterator over the lines of COPYING it <- ireadLines(file.path(R.home(), \"COPYING\")) nextOr(it) #> [1] \"\\t\\t    GNU GENERAL PUBLIC LICENSE\" nextOr(it) #> [1] \"\\t\\t       Version 2, June 1991\" nextOr(it) #> [1] \"\""},{"path":"https://crowding.github.io/iterors/reference/ireaddf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an iterator to read data frames from files — ireaddf","title":"Create an iterator to read data frames from files — ireaddf","text":"Create iterator read data frames files.","code":""},{"path":"https://crowding.github.io/iterors/reference/ireaddf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an iterator to read data frames from files — ireaddf","text":"","code":"ireaddf(filenames, n, start = 1, col.names, chunkSize = 1000)"},{"path":"https://crowding.github.io/iterors/reference/ireaddf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an iterator to read data frames from files — ireaddf","text":"filenames Names files contains column data. n Number elements read column file. start Element starting reading . col.names Names columns. chunkSize Number rows read time.","code":""},{"path":"https://crowding.github.io/iterors/reference/ireaddf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an iterator to read data frames from files — ireaddf","text":"Originally itertools package.","code":""},{"path":"https://crowding.github.io/iterors/reference/is.iteror.html","id":null,"dir":"Reference","previous_headings":"","what":"is.iteror indicates if an object is an iteror. — is.iteror","title":"is.iteror indicates if an object is an iteror. — is.iteror","text":".iteror indicates object iteror.","code":""},{"path":"https://crowding.github.io/iterors/reference/is.iteror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is.iteror indicates if an object is an iteror. — is.iteror","text":"","code":"is.iteror(x)"},{"path":"https://crowding.github.io/iterors/reference/is.iteror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is.iteror indicates if an object is an iteror. — is.iteror","text":"x object.","code":""},{"path":"https://crowding.github.io/iterors/reference/is.iteror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"is.iteror indicates if an object is an iteror. — is.iteror","text":"","code":"it <- iteror(1:3) stopifnot(is.iteror(it)) repeat {   print(nextOr(it, break)) } #> [1] 1 #> [1] 2 #> [1] 3"},{"path":"https://crowding.github.io/iterors/reference/iseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterators for sequence generation — iseq","title":"Iterators for sequence generation — iseq","text":"Constructs iterators generate regular sequences follow seq family.","code":""},{"path":"https://crowding.github.io/iterors/reference/iseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterators for sequence generation — iseq","text":"","code":"iseq(   from = 1,   to = NULL,   by = NULL,   length_out = NULL,   along_with = NULL,   ...,   recycle = FALSE,   chunkSize,   chunks )  iseq_along(along_with, ...)"},{"path":"https://crowding.github.io/iterors/reference/iseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterators for sequence generation — iseq","text":"starting value sequence. end value sequence. increment sequence. length_out desired length sequence. non-negative number, seq rounded fractional. along_with length sequence match length ... Unused. recycle Whether restart sequence reaches . chunkSize Optional; return many values per call. chunks Optional; return many chunks.","code":""},{"path":"https://crowding.github.io/iterors/reference/iseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterators for sequence generation — iseq","text":"iteror.","code":""},{"path":"https://crowding.github.io/iterors/reference/iseq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterators for sequence generation — iseq","text":"iseq function generates sequence values beginning ending . sequence values determined , length_out, along_with arguments. argument determines step size sequence, whereas length_out along_with determine length sequence. given, determined either length_out along_with. default, neither given, case set 1 -1, depending whether > .","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/iseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterators for sequence generation — iseq","text":"","code":"it <- iseq(from=2, to=5) unlist(as.list(it)) == 2:5 #> [1] TRUE TRUE TRUE TRUE"},{"path":"https://crowding.github.io/iterors/reference/isplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Iterator — isplit","title":"Split Iterator — isplit","text":"Returns iterator divides data vector x groups defined f.","code":""},{"path":"https://crowding.github.io/iterors/reference/isplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Iterator — isplit","text":"","code":"isplit(x, f, drop = FALSE, ...)"},{"path":"https://crowding.github.io/iterors/reference/isplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Iterator — isplit","text":"x vector data frame values split groups. f factor list factors used categorize x. drop logical indicating levels occur dropped. ... current ignored.","code":""},{"path":"https://crowding.github.io/iterors/reference/isplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Iterator — isplit","text":"split iterator.","code":""},{"path":"https://crowding.github.io/iterors/reference/isplit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split Iterator — isplit","text":"Originally iterators package.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/isplit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Iterator — isplit","text":"","code":"x <- rnorm(200) f <- factor(sample(1:10, length(x), replace = TRUE))  it <- isplit(x, f) expected <- split(x, f)  for (i in expected) {     actual <- nextOr(it, break)     stopifnot(actual$value == i) }"},{"path":"https://crowding.github.io/iterors/reference/itabulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator that maps a function to a sequence of numeric values — itabulate","title":"Iterator that maps a function to a sequence of numeric values — itabulate","text":"Constructs iterator maps given function indefinite sequence numeric values. input function f expected accept single numeric argument. sequence arguments passed f begin start incremented step.","code":""},{"path":"https://crowding.github.io/iterors/reference/itabulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator that maps a function to a sequence of numeric values — itabulate","text":"","code":"itabulate(f, start = 1, step = 1)"},{"path":"https://crowding.github.io/iterors/reference/itabulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator that maps a function to a sequence of numeric values — itabulate","text":"f function apply start sequence's initial value step sequence's step size","code":""},{"path":"https://crowding.github.io/iterors/reference/itabulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator that maps a function to a sequence of numeric values — itabulate","text":"iterator returns mapped values sequence","code":""},{"path":"https://crowding.github.io/iterors/reference/itabulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator that maps a function to a sequence of numeric values — itabulate","text":"","code":"it <- itabulate(f=function(x) x + 1) take(it, 4) # 2 3 4 5 #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> [1] 4 #>  #> [[4]] #> [1] 5 #>   it2 <- itabulate(f=function(x) x^2, start=-3) take(it2, 6) # 9 4 1 0 1 4 #> [[1]] #> [1] 9 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 1 #>  #> [[4]] #> [1] 0 #>  #> [[5]] #> [1] 1 #>  #> [[6]] #> [1] 4 #>   it3 <- itabulate(abs, start=-5, step=2) take(it3, 6) # 5 3 1 1 3 5 #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> [1] 1 #>  #> [[4]] #> [1] 1 #>  #> [[5]] #> [1] 3 #>  #> [[6]] #> [1] 5 #>   it4 <- itabulate(exp, start=6, step=-2) take(it4, 4) # exp(c(6, 4, 2, 0)) #> [[1]] #> [1] 403.4288 #>  #> [[2]] #> [1] 54.59815 #>  #> [[3]] #> [1] 7.389056 #>  #> [[4]] #> [1] 1 #>"},{"path":"https://crowding.github.io/iterors/reference/iteror.function.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an iteror object with custom-programmed behavior. — iteror.function","title":"Construct an iteror object with custom-programmed behavior. — iteror.function","text":"Pass obj function first argument named \"\".  writing function, can maintain state using enclosed variables update using <<-, Whatever value obj() returns next element iteror. Treat argument lazy value; touch need signal end iteration; signal end iteration, force immediately return .","code":""},{"path":"https://crowding.github.io/iterors/reference/iteror.function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an iteror object with custom-programmed behavior. — iteror.function","text":"","code":"# S3 method for `function` iteror(obj, ..., catch, sigil, count)"},{"path":"https://crowding.github.io/iterors/reference/iteror.function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an iteror object with custom-programmed behavior. — iteror.function","text":"obj function. argument named \"\" ... Undocumented. catch obj argument, specify e.g. catch=\"StopIteration\" interpret error message end iteration. sigil obj argument, can specify special value watch end iteration. Stop signaled function result identical() sigil. count obj argument, can specify many calls stop iteration, give NA Inf never stop.","code":""},{"path":"https://crowding.github.io/iterors/reference/iteror.function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an iteror object with custom-programmed behavior. — iteror.function","text":"object mode \"function\" class \"iteror\".","code":""},{"path":"https://crowding.github.io/iterors/reference/iteror.function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct an iteror object with custom-programmed behavior. — iteror.function","text":"can also provide obj simple function arguments, long specify one catch, sigil, count specify detect end iteration.","code":""},{"path":"https://crowding.github.io/iterors/reference/iteror.function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct an iteror object with custom-programmed behavior. — iteror.function","text":"","code":"# an iterator that counts from start to stop irange <- function(from=1, to=Inf) {   current <- from   iteror(function(or) {     if (current > to) {       return(or)     } else {       tmp <- current       current <<- current + 1       tmp     }   }) } it <- irange(5, 10) as.vector(it, \"numeric\") #> [1]  5  6  7  8  9 10  # an endless random number generator irand <- function(min, max) {  iteror(function() runif(1, min=min, max=max), count=Inf) } take(irand(5, 10), 10) #> [[1]] #> [1] 6.224605 #>  #> [[2]] #> [1] 5.43818 #>  #> [[3]] #> [1] 6.955542 #>  #> [[4]] #> [1] 5.912807 #>  #> [[5]] #> [1] 5.668124 #>  #> [[6]] #> [1] 6.287315 #>  #> [[7]] #> [1] 7.766235 #>  #> [[8]] #> [1] 5.740346 #>  #> [[9]] #> [1] 9.814484 #>  #> [[10]] #> [1] 9.722614 #>"},{"path":"https://crowding.github.io/iterors/reference/iteror.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an iteror from a given object. — iteror","title":"Make an iteror from a given object. — iteror","text":"<- iteror(obj, ...) generic constructor creates objects class \"iteror\" input. iteror outputs single element sequence time call nextOr(). Different iteror methods exist different data types may take different optional arguments listed page.","code":""},{"path":"https://crowding.github.io/iterors/reference/iteror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an iteror from a given object. — iteror","text":"","code":"iteror(obj, ...)  # S3 method for default iteror(obj, ..., recycle = FALSE, chunkSize, chunks)  # S3 method for connection iteror(obj, ...)  # S3 method for array iteror(   obj,   ...,   by = c(\"cell\", \"row\", \"column\"),   chunkSize,   chunks,   recycle = FALSE,   drop = FALSE,   rowMajor = TRUE )  # S3 method for matrix iteror(   obj,   ...,   by = c(\"cell\", \"row\", \"column\"),   chunkSize,   chunks,   recycle = FALSE,   drop = FALSE,   rowMajor = TRUE )  # S3 method for data.frame iteror(obj, ..., recycle = FALSE, chunkSize, chunks, by = c(\"column\", \"row\"))  # S3 method for python.builtin.object iteror(obj, ...)"},{"path":"https://crowding.github.io/iterors/reference/iteror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an iteror from a given object. — iteror","text":"obj object iterate . ... Different iteror methods may take differetn options depending class obj.#' @return object classes 'iteror' 'iter'. recycle boolean describing whether iterator reset running values. chunkSize number elements return call nextOr. chunks Split input many chunks. split array data frame. Can \"cell\", \"row\", \"column\", numeric dimensions. drop Whether drop array dimensions enumerated . rowMajor TRUE, return slices order first indices varying fastest (i_enumerate).","code":""},{"path":"https://crowding.github.io/iterors/reference/iteror.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an iteror from a given object. — iteror","text":"called, iteror may either return new value stop. way iteror signals stop whatever write argument . instance can write =break exit loop.Summing iteror way looks like:   Another way use \"\" argument give sigil value; , special value interpreted end iteration.  result calling nextOr identical() sigil value provided, know iterator ended. pattern looks like:   (Note use new.env(). R commonplace use NULL NA role sigil, works iterator needs yield NULL . safer alternative use one-shot sigil value; new.env() works well , constructs object identical object R session.) Note iteror objects simply functions class attribute attached, nextOr.iteror call function. mood, skip calling nextOr S3 dispatch call function directly. take approach, make sure called iteror() first ensure true iteror object.   create iterors custom-defined behavior, see iteror.function.","code":"sum <- 0 it <- iteror(iseq(0, 100, 7)) repeat {   sum <- sum + nextOr(it, break) } sum <- 0 stopped <- new.env() it <- iteror(iseq(0, 100, 7)) repeat {   val <- nextOr(it, stopped)   if (identical(val, stopped)) break   sum <- sum + val } sum <- 0 it <- iteror(iseq(0, 100, 7)) repeat sum <- sum + it(or=break) sum #> [1] 735"},{"path":"https://crowding.github.io/iterors/reference/iteror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an iteror from a given object. — iteror","text":"","code":"l <- iteror(letters, chunkSize=7) as.list(l) #> [[1]] #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" #>  #> [[2]] #> [1] \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" #>  #> [[3]] #> [1] \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" #>  #> [[4]] #> [1] \"v\" \"w\" \"x\" \"y\" \"z\" #>   a <- array(1:8, c(2, 2, 2))  # iterate over all the slices it <- iteror(a, by=3) as.list(it) #> [[1]] #> , , 1 #>  #>      [,1] [,2] #> [1,]    1    3 #> [2,]    2    4 #>  #>  #> [[2]] #> , , 1 #>  #>      [,1] [,2] #> [1,]    5    7 #> [2,]    6    8 #>  #>   # iterate over all the columns of each slice it <- iteror(a, by=c(2, 3)) as.list(it) #> [[1]] #> , , 1 #>  #>      [,1] #> [1,]    1 #> [2,]    2 #>  #>  #> [[2]] #> , , 1 #>  #>      [,1] #> [1,]    3 #> [2,]    4 #>  #>  #> [[3]] #> , , 1 #>  #>      [,1] #> [1,]    5 #> [2,]    6 #>  #>  #> [[4]] #> , , 1 #>  #>      [,1] #> [1,]    7 #> [2,]    8 #>  #>   # iterate over all the rows of each slice it <- iteror(a, by=c(1, 3)) as.list(it) #> [[1]] #> , , 1 #>  #>      [,1] [,2] #> [1,]    1    3 #>  #>  #> [[2]] #> , , 1 #>  #>      [,1] [,2] #> [1,]    2    4 #>  #>  #> [[3]] #> , , 1 #>  #>      [,1] [,2] #> [1,]    5    7 #>  #>  #> [[4]] #> , , 1 #>  #>      [,1] [,2] #> [1,]    6    8 #>  #>"},{"path":"https://crowding.github.io/iterors/reference/makeIwrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterator Constructor-Constructor Function Wrapper — makeIwrapper","title":"Iterator Constructor-Constructor Function Wrapper — makeIwrapper","text":"makeIwrapper function wraps R function produce iterator constructor.  used construct random sampling iterators package; instance irnorm defined irnorm <- makeIwrapper(rnorm).","code":""},{"path":"https://crowding.github.io/iterors/reference/makeIwrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterator Constructor-Constructor Function Wrapper — makeIwrapper","text":"","code":"makeIwrapper(FUN)"},{"path":"https://crowding.github.io/iterors/reference/makeIwrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterator Constructor-Constructor Function Wrapper — makeIwrapper","text":"FUN function generates different values time called; typically one standard random number generator functions.","code":""},{"path":"https://crowding.github.io/iterors/reference/makeIwrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterator Constructor-Constructor Function Wrapper — makeIwrapper","text":"iterator wrapper around corresponding function.","code":""},{"path":"https://crowding.github.io/iterors/reference/makeIwrapper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterator Constructor-Constructor Function Wrapper — makeIwrapper","text":"resulting iterator constructors take optional count argument specifies number times resulting iterator fire. also argument independent enables independent tracking random number seed. isample function example one iterator constructoe (irnorm, irunif, etc.). Original version appeared iterators package.","code":""},{"path":"https://crowding.github.io/iterors/reference/makeIwrapper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterator Constructor-Constructor Function Wrapper — makeIwrapper","text":"","code":"# create an iterator maker for the sample function mysample <- makeIwrapper(sample) # use this iterator maker to generate an iterator that will generate three five # member samples from the sequence 1:100 it <- mysample(1:100, 5, count = 3) nextOr(it) #> [1]  7 75 11 77 63 nextOr(it) #> [1] 98 15 37 14 90 nextOr(it) #> [1] 49 28 82 59 17 nextOr(it, NULL)  # NULL #> NULL"},{"path":"https://crowding.github.io/iterors/reference/nextOr.html","id":null,"dir":"Reference","previous_headings":"","what":"Retreive the next element from an iteror. — nextOr","title":"Retreive the next element from an iteror. — nextOr","text":"Retreive next element iteror.","code":""},{"path":"https://crowding.github.io/iterors/reference/nextOr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retreive the next element from an iteror. — nextOr","text":"","code":"nextOr(obj, or, ...)"},{"path":"https://crowding.github.io/iterors/reference/nextOr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retreive the next element from an iteror. — nextOr","text":"obj iteror. iterator reached end, argument forced returned. ... arguments may used specific iterors.","code":""},{"path":"https://crowding.github.io/iterors/reference/nth.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the nth item of an iteror — nth","title":"Returns the nth item of an iteror — nth","text":"Returns nth item iteror advancing iteror n steps ahead. iteror entirely consumed, argument returned instead. , either n > length(iteror) n 0, iteror consumed.","code":""},{"path":"https://crowding.github.io/iterors/reference/nth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the nth item of an iteror — nth","text":"","code":"nth(obj, n, or, ...)"},{"path":"https://crowding.github.io/iterors/reference/nth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the nth item of an iteror — nth","text":"obj iterable. n index desired element return. iteror finishes retuning n elements, argument forced returned. ... passed along iteror constructor.","code":""},{"path":"https://crowding.github.io/iterors/reference/nth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the nth item of an iteror — nth","text":"nth element iteror result forcing .","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/nth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the nth item of an iteror — nth","text":"","code":"it <- iteror(1:10) # Returns 5 nth(it, 5, NA) #> [1] 5  it2 <- iteror(letters) # Returns 'e' nth(it2, 5, NA) #> [1] \"e\"  it3 <- iteror(letters) # Returns default value of NA nth(it3, 42, NA) #> [1] NA  it4 <- iteror(letters) # Returns default value of \"foo\" nth(it4, 42, or=\"foo\") #> [1] \"foo\""},{"path":"https://crowding.github.io/iterors/reference/py_iteror.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap an iteror to use with Python code. Requires the\nreticulate package. — py_iteror","title":"Wrap an iteror to use with Python code. Requires the\nreticulate package. — py_iteror","text":"Wrap iteror use Python code. Requires reticulate package.","code":""},{"path":"https://crowding.github.io/iterors/reference/py_iteror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap an iteror to use with Python code. Requires the\nreticulate package. — py_iteror","text":"","code":"py_iteror(obj, ...)"},{"path":"https://crowding.github.io/iterors/reference/py_iteror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap an iteror to use with Python code. Requires the\nreticulate package. — py_iteror","text":"obj iterable object ... Passed along iteror.","code":""},{"path":"https://crowding.github.io/iterors/reference/quantify.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of times an iterable object is TRUE — quantify","title":"Count the number of times an iterable object is TRUE — quantify","text":"Returns number elements iterable object evaluate TRUE.","code":""},{"path":"https://crowding.github.io/iterors/reference/quantify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of times an iterable object is TRUE — quantify","text":"","code":"quantify(obj, ...)"},{"path":"https://crowding.github.io/iterors/reference/quantify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of times an iterable object is TRUE — quantify","text":"obj iterable object ... arguments passed iteror.","code":""},{"path":"https://crowding.github.io/iterors/reference/quantify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of times an iterable object is TRUE — quantify","text":"number TRUE elements","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/quantify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the number of times an iterable object is TRUE — quantify","text":"","code":"it <- iteror(c(TRUE, FALSE, TRUE)) quantify(it) # 2 #> [1] 2  set.seed(42) x <- sample(c(TRUE, FALSE), size=10, replace=TRUE) quantify(x) # Equivalent to sum(x) #> [1] 5"},{"path":"https://crowding.github.io/iterors/reference/record.html","id":null,"dir":"Reference","previous_headings":"","what":"Record and replay iterators — record","title":"Record and replay iterators — record","text":"record function records values issued specified iterator file connection object.  ireplay function returns iterator replay values.  useful iterating concurrently multiple, large matrices data frames keep memory time.  large objects can recorded files one time, replayed concurrently using minimal memory.","code":""},{"path":"https://crowding.github.io/iterors/reference/record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record and replay iterators — record","text":"","code":"record(iterable, con, ...)"},{"path":"https://crowding.github.io/iterors/reference/record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record and replay iterators — record","text":"iterable iterable record file. con file path open connection. ... passed along iteror(iterable, ...)","code":""},{"path":"https://crowding.github.io/iterors/reference/record.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Record and replay iterators — record","text":"Originally itertools package.","code":""},{"path":"https://crowding.github.io/iterors/reference/record.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Record and replay iterators — record","text":"","code":"suppressMessages(library(foreach))  m1 <- matrix(rnorm(70), 7, 10) f1 <- tempfile() record(iteror(m1, by='row', chunkSize=3), f1)  m2 <- matrix(1:50, 10, 5) f2 <- tempfile() record(iteror(m2, by='column', chunkSize=3), f2)  # Perform a simple out-of-core matrix multiply p <- foreach(col=ireplay(f2), .combine='cbind') %:%        foreach(row=ireplay(f1), .combine='rbind') %do% {          row %*% col        }  dimnames(p) <- NULL print(p) #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,]  19.939931  37.987451  56.034971   74.08249   92.13001 #> [2,]   4.977286   9.523644  14.070002   18.61636   23.16272 #> [3,]   4.289386  -3.875437 -12.040260  -20.20508  -28.36991 #> [4,] -12.543284 -13.287506 -14.031729  -14.77595  -15.52017 #> [5,] -19.103148 -46.572138 -74.041129 -101.51012 -128.97911 #> [6,]   1.819314   6.919221  12.019127   17.11903   22.21894 #> [7,]   1.047657   5.516499   9.985342   14.45418   18.92303 all.equal(p, m1 %*% m2) #> [1] TRUE unlink(c(f1, f2))"},{"path":"https://crowding.github.io/iterors/reference/reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sum, product, or general reduction of an iterator. — reduce","title":"Compute the sum, product, or general reduction of an iterator. — reduce","text":"reduce(obj, fun) applies 2-argument function fun successive elements obj. example fun +, reduce(, +, init=0) computes 0 + nextElem() + nextElem() + nextElem() + ... iterator finishes, returns final value.","code":""},{"path":"https://crowding.github.io/iterors/reference/reduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the sum, product, or general reduction of an iterator. — reduce","text":"","code":"reduce(obj, fun = `+`, init = 0, ...)  # S3 method for iteror reduce(obj, fun = `+`, init = 0, ...)  i_accum(obj, fun = `+`, init = 0, ...)  # S3 method for iteror sum(..., na.rm = FALSE)  # S3 method for iteror prod(..., na.rm = FALSE)"},{"path":"https://crowding.github.io/iterors/reference/reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sum, product, or general reduction of an iterator. — reduce","text":"obj iterable object fun function least two arguments. init starting value. ... Extra parameters passed call fun. na.rm Whether drop NA values computing sum prod.","code":""},{"path":"https://crowding.github.io/iterors/reference/reduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sum, product, or general reduction of an iterator. — reduce","text":"result accumulation.","code":""},{"path":"https://crowding.github.io/iterors/reference/reduce.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the sum, product, or general reduction of an iterator. — reduce","text":"Peter Meilstrup","code":""},{"path":"https://crowding.github.io/iterors/reference/reduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sum, product, or general reduction of an iterator. — reduce","text":"","code":"it <- icount(5) total <- reduce(it, `+`) # sum(1:5)  it <- icount(5) reduce(it, paste0, \"\") # \"12345\" #> [1] \"12345\"  it <- icount(5) prod <- reduce(it, `*`, init=1) # prod(1:5)  # the above is equivalent to: it <- icount(5) total <- 1 repeat total <- total * nextOr(it, break)  # triangular numbers: 1, 1+2, 1+2+3, ... take(i_accum(icount()), 10, 'numeric') #>  [1]  1  3  6 10 15 21 28 36 45 55"},{"path":"https://crowding.github.io/iterors/reference/rng.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Number Iterators — irnorm","title":"Random Number Iterators — irnorm","text":"function returns iterator returns random numbers various distributions.  one wrapper around standard R function.","code":""},{"path":"https://crowding.github.io/iterors/reference/rng.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Number Iterators — irnorm","text":"","code":"irnorm(   n,   mean = 0,   sd = 1,   count = Inf,   independent = FALSE,   seed = rng.state$stream() )  irbinom(   n,   size,   prob,   count = Inf,   independent = FALSE,   seed = rng.state$stream() )  irnbinom(   n,   size,   prob,   mu,   count = Inf,   independent = FALSE,   seed = rng.state$stream() )  irpois(n, lambda, count = Inf, independent = FALSE, seed = rng.state$stream())  isample(   x,   size,   replace = FALSE,   prob = NULL,   count = Inf,   independent = FALSE,   seed = rng.state$stream() )  irunif(   n,   min = 0,   max = 1,   count = Inf,   independent = FALSE,   seed = rng.state$stream() )"},{"path":"https://crowding.github.io/iterors/reference/rng.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Number Iterators — irnorm","text":"n many samples compute per call; see e.g. rnorm. mean see rnorm. sd see rnorm. count number times iterator fire.  specified, fire values forever. independent TRUE, iterator keep RNG state, output reproducible independent anything else program. comes performance cost.  generation seed used independent=TRUE: seed value usable \"L'Ecuyer-CMRG\" generator. default create pseudo-independent stream newly constructed iterator. can specify specific value reproducibility. reproduciby create several independent random numer iterators see example iRNGStream. size see e.g. rbinom. prob see e.g. rbinom. mu see rnbinom. lambda see rpois. x see isample. replace see isample. min see runif. max see runif.","code":""},{"path":"https://crowding.github.io/iterors/reference/rng.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Number Iterators — irnorm","text":"iterator wrapper around corresponding random number generator function.","code":""},{"path":"https://crowding.github.io/iterors/reference/rng.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Number Iterators — irnorm","text":"Originally iterators package.","code":""},{"path":"https://crowding.github.io/iterors/reference/rng.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Number Iterators — irnorm","text":"","code":"# create an iterator that returns three random numbers it <- irnorm(1, count = 3) nextOr(it) #> [1] 0.5809965 nextOr(it) #> [1] 0.7681787 nextOr(it) #> [1] 0.4637676 nextOr(it, NULL) #> NULL  # iterators created with `independent=TRUE` will produce reproducible values it <- irunif(n=1, seed=314, independent=TRUE) nextOr(it) # 0.4936700 #> [1] 0.49367 nextOr(it) # 0.5103891 #> [1] 0.5103891 nextOr(it) # 0.2338745 #> [1] 0.2338745"},{"path":"https://crowding.github.io/iterors/reference/take.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the first n elements of an iterable object in a vector. — take","title":"Return the first n elements of an iterable object in a vector. — take","text":"Returns first n elements iterable object list. n larger number elements object, entire iterator consumed.","code":""},{"path":"https://crowding.github.io/iterors/reference/take.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the first n elements of an iterable object in a vector. — take","text":"","code":"take(obj, n = 1, mode = \"list\", ...)  # S3 method for default take(obj, n = 1, mode = \"list\", ...)  # S3 method for iteror take(obj, n = 1, mode = \"list\", ...)"},{"path":"https://crowding.github.io/iterors/reference/take.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the first n elements of an iterable object in a vector. — take","text":"obj iterable object. n maximum number elements extract iteror. mode mode vector return. ... arguments may passed along iteror constructor.","code":""},{"path":"https://crowding.github.io/iterors/reference/take.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the first n elements of an iterable object in a vector. — take","text":"list first n items iterable obj","code":""},{"path":"https://crowding.github.io/iterors/reference/take.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the first n elements of an iterable object in a vector. — take","text":"function take first appeared package itertools2. basically alias .list defaults n=1.","code":""},{"path":[]},{"path":"https://crowding.github.io/iterors/reference/take.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the first n elements of an iterable object in a vector. — take","text":"","code":"take(1:10, 3) # 1 2 3 #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  take(icount(), 10) # 1:10 #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 4 #>  #> [[5]] #> [1] 5 #>  #> [[6]] #> [1] 6 #>  #> [[7]] #> [1] 7 #>  #> [[8]] #> [1] 8 #>  #> [[9]] #> [1] 9 #>  #> [[10]] #> [1] 10 #>  take(icount(5), 10) # 1 2 3 4 5 #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 4 #>  #> [[5]] #> [1] 5 #>"},{"path":"https://crowding.github.io/iterors/news/index.html","id":"iterors-10","dir":"Changelog","previous_headings":"","what":"iterors 1.0","title":"iterors 1.0","text":"Initial release. Split “async” package. Incorporated/ported “iterators” package. Incorporated/ported “itertools” package. Incorporated/ported “itertools2” package. New functions: i_enumerate.array can iterate arbitrary margins, providing vector index. i_window constructs sliding window arbitrary length given iterator, generalizing itertools2::ipairwise itripletwise. New functions i_rle() i_rle_inverse() run-length encoding. Introduced accumulation methods i_accum(), reduce(), sum() prod(). i_chain(...) companion function i_concat() accepts iterable (rather ...). New iteror methods .numeric, .vector, .character, .logical. concat() pastes chunks iterator vector. iteror can make iterator Python objects via reticulate package. direction. py_iteror converts iteror Python iterable. New features: Memory-backed counting iterors icount, icountn, idiv, igrid, iseq, i_enumerate.default, iteror.default, iteror.data.frame, iteror.default i_enumerate.array shared logic; accept options chunks, chunksize recycle equivalent behavior. icount icountn preserve dimnames. Multidimensional iterators icountn, igrid, i_enumerate.array iteror.array option rowMajor control order iteration. i_unique uses hash table rather linear scan, much improved performance; also now works type R object. Random number iterators like irunif, isample friends accept option independent; TRUE, iterator maintain private seed value, interleaving iterators affect reproducibility. default iterors independent=TRUE start seed generated global iRNGStream instance parallel iterors produce pseudo-independent streams. i_tee works iterator, using dynamic queue, previously itertools::i_tee worked memory-backed iterators. Python compatibility: py_iteror wraps iterator can used Python code via package reticulate. Meanwhile iteror method Python objects, allowing Python iterators used transparently iterors code.","code":""}]
